/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2022-05-06 14:08:30.368793
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((1.0)*x5);
x13=((0.162)*x4);
x14=((0.13)*x2);
x15=((0.5)*x4);
x16=((0.162)*x7);
x17=((0.13)*x6);
x18=((0.13)*x4);
x19=((1.0)*x7);
x20=((1.0)*x4);
x21=((0.162)*x2);
x22=((0.5)*x2);
x23=((1.0)*x2);
x24=((0.13)*x5);
x25=(x0*x3);
x26=(x0*x1);
x27=(x3*x4);
x28=(x1*x7);
x29=(x3*x7);
x30=(x0*x6);
x31=(x11*x6);
x32=(x1*x2);
x33=(x19*x6);
x34=(x23*x3);
x35=(x1*x23);
x36=(x2*x29);
x37=(x20*x26);
x38=(x1*x19*x4);
x39=((((-1.0)*x34))+((x1*x4)));
x40=(((x2*x26))+((x25*x4)));
x41=(((x27*x7))+((x2*x28)));
x42=((((-1.0)*x23*x26))+(((-1.0)*x20*x25)));
x43=(x19*(((((-1.0)*x32))+(((-1.0)*x27)))));
x44=((((-1.0)*x12*x7))+((x40*x6)));
x45=(((x0*x5))+((x41*x6)));
x46=(((x11*((x32+x27))))+((x10*x39*x6)));
x47=(((x10*x44))+((x11*(((((-1.0)*x37))+((x2*x25)))))));
x48=(((x10*x45))+((x11*(((((-1.0)*x38))+x36)))));
eerot[0]=(((x47*x9))+((x8*(((((-1.0)*x33))+((x42*x5)))))));
eerot[1]=(((x47*x8))+((x9*(((((-1.0)*x12*x42))+x33)))));
eerot[2]=(((x10*((x37+(((-1.0)*x23*x25))))))+((x11*x44)));
IkReal x49=((1.0)*x25);
eetrans[0]=(((x10*((((x18*x26))+(((-1.0)*x14*x49))))))+(((-1.0)*x22*x49))+(((-1.0)*x16*x6))+(((0.7)*x25))+((x11*((((x17*x40))+(((-1.0)*x24*x7))))))+((x5*(((((-1.0)*x21*x26))+(((-1.0)*x13*x49))))))+((x15*x26)));
eerot[3]=(((x8*((x30+((x43*x5))))))+((x48*x9)));
eerot[4]=(((x9*(((((-1.0)*x30))+(((-1.0)*x12*x43))))))+((x48*x8)));
eerot[5]=(((x11*x45))+((x10*(((((-1.0)*x19*x2*x3))+x38)))));
IkReal x50=((1.0)*x29);
eetrans[1]=(((x5*(((((-1.0)*x13*x50))+(((-1.0)*x16*x32))))))+(((0.162)*x30))+(((0.7)*x29))+((x10*((((x18*x28))+(((-1.0)*x14*x50))))))+((x11*((((x0*x24))+((x17*x41))))))+(((-1.0)*x22*x50))+((x15*x28)));
eerot[6]=(((x5*x8*(((((-1.0)*x1*x20))+x34))))+((x46*x9)));
eerot[7]=(((x39*x5*x9))+((x46*x8)));
eerot[8]=(((x10*(((((-1.0)*x35))+(((-1.0)*x20*x3))))))+((x31*x39)));
IkReal x51=((1.0)*x3);
IkReal x52=((1.0)*x1);
eetrans[2]=((0.275)+(((0.7)*x1))+(((-1.0)*x15*x51))+((x10*(((((-1.0)*x14*x52))+(((-1.0)*x18*x51))))))+((x5*(((((-1.0)*x13*x52))+((x21*x3))))))+(((-1.0)*x22*x52))+((x31*(((((-1.0)*x14*x51))+((x1*x18)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((-0.13)*r02))+px);
new_r10=r10;
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((-0.13)*r12))+py);
new_r20=r20;
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((-0.275)+(((-0.13)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x56=((1715.0)*rxp1_1);
IkReal x57=((261.8511)*r01);
IkReal x58=((396.9)*px);
IkReal x59=((396.9)*pz);
IkReal x60=((261.8511)*r21);
IkReal x61=((523.7022)*r00);
IkReal x62=((3430.0)*rxp0_1);
IkReal x63=((81.0)*r11);
IkReal x64=((500.0)*py);
IkReal x65=((523.7022)*r11);
IkReal x66=((793.8)*py);
IkReal x67=((3430.0)*rxp1_0);
IkReal x68=((6860.0)*rxp0_0);
IkReal x69=((1047.4044)*r10);
IkReal x70=((324.0)*r00);
IkReal x71=((1000.0)*px);
IkReal x72=((162.0)*r01);
IkReal x73=((162.0)*r10);
IkReal x74=((1225.0)*pp);
IkReal x75=((4900.0)*npx);
IkReal x76=((2450.0)*pp);
IkReal x77=((2450.0)*npy);
IkReal x78=(r01*x74);
IkReal x79=(px*x77);
IkReal x80=(pz*x77);
IkReal x81=(r21*x74);
IkReal x82=(r00*x76);
IkReal x83=(px*x75);
IkReal x84=(x64+(((-1.0)*x63)));
IkReal x85=((-162.0)*r10);
IkReal x86=(r11*x76);
IkReal x87=((4900.0)*npy*py);
IkReal x88=((4900.0)*pp*r10);
IkReal x89=((9800.0)*npx*py);
IkReal x90=((((-1.0)*x71))+x72);
IkReal x91=(x63+(((-1.0)*x64)));
IkReal x92=(x63+x64);
IkReal x93=((((-1.0)*x71))+(((-1.0)*x72)));
IkReal x94=((-1.0)*x92);
IkReal x95=(x79+x58);
IkReal x96=(x79+x56);
IkReal x97=(x62+x83);
IkReal x98=(x61+x82);
IkReal x99=(x78+x57);
IkReal x100=(x65+x86);
IkReal x101=(x67+x87);
IkReal x102=(x60+x81);
IkReal x103=(x69+x88);
IkReal x104=((((523.7022)*r20))+((r20*x76))+(((-1.0)*pz*x75)));
IkReal x105=(x62+x98);
IkReal x106=(x56+x99);
IkReal x107=(x58+x99);
IkReal x108=(x56+x95);
IkReal x109=(x102+x59+(((-1.0)*x80)));
IkReal x110=((((-1.0)*x102))+x59+x80);
IkReal x111=(x106+x58);
op[0]=((((-1.0)*x111))+x79);
op[1]=x109;
op[2]=((((-1.0)*x105))+x83);
op[3]=x104;
op[4]=(x106+(((-1.0)*x95)));
op[5]=x110;
op[6]=x109;
op[7]=(x107+(((-1.0)*x96)));
op[8]=x104;
op[9]=(x98+(((-1.0)*x97)));
op[10]=x110;
op[11]=(x108+(((-1.0)*x99)));
op[12]=x84;
op[13]=x84;
op[14]=x85;
op[15]=x85;
op[16]=x92;
op[17]=x92;
op[18]=0;
op[19]=x84;
op[20]=0;
op[21]=x85;
op[22]=0;
op[23]=x92;
op[24]=((((-1.0)*x100))+x101+(((-1.0)*x66)));
op[25]=0;
op[26]=((((-1.0)*x103))+x68+x89);
op[27]=0;
op[28]=((((-1.0)*x101))+x100+(((-1.0)*x66)));
op[29]=0;
op[30]=0;
op[31]=(x100+x66+x67+(((-1.0)*x87)));
op[32]=0;
op[33]=(x103+x68+(((-1.0)*x89)));
op[34]=0;
op[35]=((((-1.0)*x100))+x66+x87+(((-1.0)*x67)));
op[36]=x90;
op[37]=x90;
op[38]=x70;
op[39]=x70;
op[40]=x93;
op[41]=x93;
op[42]=0;
op[43]=x90;
op[44]=0;
op[45]=x70;
op[46]=0;
op[47]=x93;
op[48]=((((-1.0)*x79))+x111);
op[49]=x109;
op[50]=(x105+(((-1.0)*x83)));
op[51]=x104;
op[52]=((((-1.0)*x106))+x95);
op[53]=x110;
op[54]=x109;
op[55]=((((-1.0)*x107))+x96);
op[56]=x104;
op[57]=(x97+(((-1.0)*x98)));
op[58]=x110;
op[59]=((((-1.0)*x108))+x99);
op[60]=x91;
op[61]=x91;
op[62]=x73;
op[63]=x73;
op[64]=x94;
op[65]=x94;
op[66]=0;
op[67]=x91;
op[68]=0;
op[69]=x73;
op[70]=0;
op[71]=x94;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x112=htj0*htj0;
CheckValue<IkReal> x113=IKPowWithIntegerCheck(((1.0)+x112),-1);
if(!x113.valid){
continue;
}
cj0array[numsolutions]=((x113.value)*(((1.0)+(((-1.0)*x112)))));
CheckValue<IkReal> x114=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x114.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x114.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x115=htj5*htj5;
CheckValue<IkReal> x116=IKPowWithIntegerCheck(((1.0)+x115),-1);
if(!x116.valid){
continue;
}
cj5array[numsolutions]=((x116.value)*(((1.0)+(((-1.0)*x115)))));
CheckValue<IkReal> x117=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x117.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x117.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x118=htj1*htj1;
CheckValue<IkReal> x119=IKPowWithIntegerCheck(((1.0)+x118),-1);
if(!x119.valid){
continue;
}
cj1array[numsolutions]=((x119.value)*(((1.0)+(((-1.0)*x118)))));
CheckValue<IkReal> x120=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x120.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x120.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((((6.17283950617284)*cj0*py))+(((-6.17283950617284)*px*sj0)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x121=((1.0)*sj0);
evalcond[0]=(((cj0*cj5*r11))+(((-1.0)*r00*sj5*x121))+((cj0*r10*sj5))+(((-1.0)*(IKcos(j3))))+(((-1.0)*cj5*r01*x121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x122=cj3*cj3;
j2eval[0]=((-1.0)+x122);
j2eval[1]=IKsign(((-0.162)+(((0.162)*x122))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x123=cj0*cj0;
IkReal x124=cj5*cj5;
IkReal x125=r01*r01;
IkReal x126=r11*r11;
IkReal x127=r00*r00;
IkReal x128=r02*r02;
IkReal x129=(cj0*sj3);
IkReal x130=(cj5*sj5);
IkReal x131=((2.0)*r11);
IkReal x132=(r00*sj0);
IkReal x133=(r02*sj0);
IkReal x134=((1.0)*x124);
IkReal x135=(cj0*r01*sj0);
IkReal x136=((2.0)*r00*r01);
IkReal x137=((2.0)*cj0*r10*sj0);
IkReal x138=(x123*x126);
IkReal x139=(x123*x125);
IkReal x140=((((-2.0)*cj0*r12*x133))+((x123*x124*(r10*r10)))+((x123*x130*x136))+(((-1.0)*x123*x128))+(((-1.0)*x134*x138))+(((-1.0)*x123*x127*x134))+(((-1.0)*r10*x123*x130*x131))+x138+x125+x128+((x124*x139))+(((-1.0)*x125*x134))+(((-2.0)*cj0*r10*x124*x132))+((x124*x127))+(((2.0)*r10*x130*x135))+(((-1.0)*x139))+((x123*(r12*r12)))+(((-1.0)*x131*x135))+((cj0*x130*x131*x132))+(((-1.0)*x130*x136))+((x124*x131*x135)));
j4eval[0]=x140;
j4eval[1]=IKsign(x140);
j4eval[2]=((IKabs(((((-1.0)*cj5*sj3*x132))+(((-1.0)*r11*sj5*x129))+((cj5*r10*x129))+((r01*sj0*sj3*sj5)))))+(IKabs((((sj3*x133))+(((-1.0)*r12*x129))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x141=((2.0)*sj1);
IkReal x142=(cj0*px);
IkReal x143=((2.0)*cj1);
IkReal x144=(py*sj0);
if( IKabs((((x142*x143))+(((-1.0)*pz*x141))+((x143*x144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*pz*x143))+(((-1.0)*x141*x142))+(((-1.0)*x141*x144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x142*x143))+(((-1.0)*pz*x141))+((x143*x144))))+IKsqr(((1.4)+(((-1.0)*pz*x143))+(((-1.0)*x141*x142))+(((-1.0)*x141*x144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x142*x143))+(((-1.0)*pz*x141))+((x143*x144))), ((1.4)+(((-1.0)*pz*x143))+(((-1.0)*x141*x142))+(((-1.0)*x141*x144))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x145=IKsin(j2);
IkReal x146=IKcos(j2);
IkReal x147=((0.5)*cj1);
IkReal x148=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x145*x148))+pz+((x146*x147)));
evalcond[1]=((((0.7)*sj1))+((x145*x147))+(((-1.0)*x146*x148))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x149=cj5*cj5;
IkReal x150=r21*r21;
IkReal x151=((((-1.0)*x149*x150))+(r22*r22)+((x149*(r20*r20)))+x150+(((-2.0)*cj5*r20*r21*sj5)));
j4eval[0]=x151;
j4eval[1]=IKsign(x151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x152=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x152;
j4eval[1]=IKsign(x152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x153=cj5*cj5;
IkReal x154=(r00*sj0);
IkReal x155=((1.0)*sj0);
IkReal x156=(r01*r21);
IkReal x157=(cj0*r10);
IkReal x158=(cj0*r11*r21);
IkReal x159=(cj5*r21*sj5);
IkReal x160=((1.0)*x153);
IkReal x161=(cj5*r20*sj5);
IkReal x162=(((r20*x153*x157))+(((-1.0)*x158*x160))+(((-1.0)*r02*r22*x155))+((sj0*x153*x156))+(((-1.0)*x157*x159))+x158+((x154*x159))+(((-1.0)*cj0*r11*x161))+((cj0*r12*r22))+(((-1.0)*x155*x156))+((r01*sj0*x161))+(((-1.0)*r20*x154*x160)));
j4eval[0]=x162;
j4eval[1]=IKsign(x162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x163=cj5*cj5;
IkReal x164=(sj1*sj2);
IkReal x165=(r01*sj0);
IkReal x166=(cj0*r10);
IkReal x167=((1.0)*sj5);
IkReal x168=(cj5*r21);
IkReal x169=(cj1*cj2);
IkReal x170=(cj0*r11);
IkReal x171=(cj5*r20);
IkReal x172=(cj0*r12);
IkReal x173=(r20*x163);
IkReal x174=((1.0)*r02*sj0);
IkReal x175=(r21*x163);
IkReal x176=((1.0)*r00*sj0);
CheckValue<IkReal> x177=IKPowWithIntegerCheck(IKsign((((r22*x172))+(((-1.0)*x170*x175))+(((-1.0)*r22*x174))+(((-1.0)*x166*x167*x168))+(((-1.0)*x167*x170*x171))+((x166*x173))+((sj5*x165*x171))+((r21*x170))+((x165*x175))+((r00*sj0*sj5*x168))+(((-1.0)*r21*x165))+(((-1.0)*x173*x176)))),-1);
if(!x177.valid){
continue;
}
CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x164*x176))+(((-1.0)*x164*x167*x170))+(((-1.0)*cj5*x169*x176))+(((-1.0)*x167*x169*x170))+((cj5*x164*x166))+((cj5*x166*x169))+((sj5*x165*x169))+((sj5*x164*x165)))),IkReal((((x169*x172))+((x164*x172))+(((-1.0)*x169*x174))+(((-1.0)*x164*x174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x177.value)))+(x178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x179=IKsin(j4);
IkReal x180=IKcos(j4);
IkReal x181=(cj2*sj1);
IkReal x182=(sj1*sj2);
IkReal x183=((1.0)*cj5);
IkReal x184=((1.0)*cj1);
IkReal x185=((1.0)*r01);
IkReal x186=(r02*sj0);
IkReal x187=(r11*sj5);
IkReal x188=(r21*sj5);
IkReal x189=(r01*sj5);
IkReal x190=(sj2*x184);
IkReal x191=(cj0*x179);
IkReal x192=(cj5*x179);
IkReal x193=((1.0)*x179);
IkReal x194=(sj0*x180);
IkReal x195=(cj0*x180);
IkReal x196=(sj0*sj5*x179);
IkReal x197=((1.0)*x195);
evalcond[0]=((((-1.0)*x188*x193))+(((-1.0)*x182))+((r20*x192))+(((-1.0)*cj2*x184))+((r22*x180)));
evalcond[1]=((((-1.0)*r22*x193))+(((-1.0)*x190))+((cj5*r20*x180))+x181+(((-1.0)*x180*x188)));
evalcond[2]=(((x180*x186))+(((-1.0)*r12*x197))+((x187*x191))+(((-1.0)*x185*x196))+(((-1.0)*r10*x183*x191))+((r00*sj0*x192)));
evalcond[3]=(((x187*x195))+(((-1.0)*sj5*x185*x194))+(((-1.0)*x186*x193))+((r12*x191))+(((-1.0)*r10*x183*x195))+((cj5*r00*x194)));
evalcond[4]=(((x187*x194))+((x189*x195))+x182+((r12*sj0*x179))+(((-1.0)*r00*x183*x195))+((cj1*cj2))+(((-1.0)*r10*x183*x194))+((r02*x191)));
evalcond[5]=((((-1.0)*r12*x194))+((sj0*x179*x187))+(((-1.0)*r10*sj0*x179*x183))+(((-1.0)*x190))+((x189*x191))+x181+(((-1.0)*r02*x197))+(((-1.0)*r00*x183*x191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x198=(cj1*cj2);
IkReal x199=(cj5*sj0);
IkReal x200=(sj1*sj2);
IkReal x201=(cj0*r12);
IkReal x202=(cj0*cj5);
IkReal x203=((1.0)*r10);
IkReal x204=(sj0*sj5);
IkReal x205=((1.0)*r01);
IkReal x206=(cj0*r11*sj5);
IkReal x207=((1.0)*r02*sj0);
CheckValue<IkReal> x208=IKPowWithIntegerCheck(IKsign((((r01*x202))+((r10*x204))+((cj0*r00*sj5))+((r11*x199)))),-1);
if(!x208.valid){
continue;
}
CheckValue<IkReal> x209 = IKatan2WithCheck(IkReal(((((-1.0)*x200*x207))+((x198*x201))+((x200*x201))+(((-1.0)*x198*x207)))),IkReal(((((-1.0)*x200*x204*x205))+((x198*x206))+((x200*x206))+(((-1.0)*x198*x204*x205))+((r00*x198*x199))+((r00*x199*x200))+(((-1.0)*x200*x202*x203))+(((-1.0)*x198*x202*x203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x208.value)))+(x209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x210=IKsin(j4);
IkReal x211=IKcos(j4);
IkReal x212=(cj2*sj1);
IkReal x213=(sj1*sj2);
IkReal x214=((1.0)*cj5);
IkReal x215=((1.0)*cj1);
IkReal x216=((1.0)*r01);
IkReal x217=(r02*sj0);
IkReal x218=(r11*sj5);
IkReal x219=(r21*sj5);
IkReal x220=(r01*sj5);
IkReal x221=(sj2*x215);
IkReal x222=(cj0*x210);
IkReal x223=(cj5*x210);
IkReal x224=((1.0)*x210);
IkReal x225=(sj0*x211);
IkReal x226=(cj0*x211);
IkReal x227=(sj0*sj5*x210);
IkReal x228=((1.0)*x226);
evalcond[0]=(((r20*x223))+(((-1.0)*cj2*x215))+(((-1.0)*x219*x224))+(((-1.0)*x213))+((r22*x211)));
evalcond[1]=(x212+((cj5*r20*x211))+(((-1.0)*x211*x219))+(((-1.0)*x221))+(((-1.0)*r22*x224)));
evalcond[2]=((((-1.0)*x216*x227))+(((-1.0)*r10*x214*x222))+((r00*sj0*x223))+((x211*x217))+(((-1.0)*r12*x228))+((x218*x222)));
evalcond[3]=((((-1.0)*r10*x214*x226))+(((-1.0)*sj5*x216*x225))+((r12*x222))+((cj5*r00*x225))+((x218*x226))+(((-1.0)*x217*x224)));
evalcond[4]=(((r12*sj0*x210))+(((-1.0)*r10*x214*x225))+x213+((x220*x226))+((x218*x225))+((cj1*cj2))+((r02*x222))+(((-1.0)*r00*x214*x226)));
evalcond[5]=((((-1.0)*r02*x228))+(((-1.0)*r10*sj0*x210*x214))+((sj0*x210*x218))+x212+((x220*x222))+(((-1.0)*r12*x225))+(((-1.0)*r00*x214*x222))+(((-1.0)*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x229=cj5*cj5;
IkReal x230=r21*r21;
IkReal x231=(cj5*r20);
IkReal x232=((1.0)*sj1);
IkReal x233=(cj1*sj2);
IkReal x234=(r21*sj5);
IkReal x235=(cj1*cj2);
IkReal x236=(r22*sj1);
CheckValue<IkReal> x237 = IKatan2WithCheck(IkReal((((sj1*sj2*x231))+((cj2*x236))+(((-1.0)*r22*x233))+(((-1.0)*sj2*x232*x234))+(((-1.0)*x234*x235))+((x231*x235)))),IkReal((((sj2*x236))+(((-1.0)*x233*x234))+((cj2*sj1*x234))+(((-1.0)*cj2*x231*x232))+((x231*x233))+((r22*x235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x237.valid){
continue;
}
CheckValue<IkReal> x238=IKPowWithIntegerCheck(IKsign(((r22*r22)+x230+(((-1.0)*x229*x230))+(((-2.0)*x231*x234))+((x229*(r20*r20))))),-1);
if(!x238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x237.value)+(((1.5707963267949)*(x238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x239=IKsin(j4);
IkReal x240=IKcos(j4);
IkReal x241=(cj2*sj1);
IkReal x242=(sj1*sj2);
IkReal x243=((1.0)*cj5);
IkReal x244=((1.0)*cj1);
IkReal x245=((1.0)*r01);
IkReal x246=(r02*sj0);
IkReal x247=(r11*sj5);
IkReal x248=(r21*sj5);
IkReal x249=(r01*sj5);
IkReal x250=(sj2*x244);
IkReal x251=(cj0*x239);
IkReal x252=(cj5*x239);
IkReal x253=((1.0)*x239);
IkReal x254=(sj0*x240);
IkReal x255=(cj0*x240);
IkReal x256=(sj0*sj5*x239);
IkReal x257=((1.0)*x255);
evalcond[0]=((((-1.0)*x242))+((r20*x252))+((r22*x240))+(((-1.0)*cj2*x244))+(((-1.0)*x248*x253)));
evalcond[1]=((((-1.0)*r22*x253))+x241+((cj5*r20*x240))+(((-1.0)*x240*x248))+(((-1.0)*x250)));
evalcond[2]=(((x240*x246))+((r00*sj0*x252))+(((-1.0)*r12*x257))+(((-1.0)*x245*x256))+(((-1.0)*r10*x243*x251))+((x247*x251)));
evalcond[3]=((((-1.0)*sj5*x245*x254))+((r12*x251))+((cj5*r00*x254))+(((-1.0)*x246*x253))+(((-1.0)*r10*x243*x255))+((x247*x255)));
evalcond[4]=(((x249*x255))+(((-1.0)*r00*x243*x255))+x242+(((-1.0)*r10*x243*x254))+((cj1*cj2))+((r12*sj0*x239))+((r02*x251))+((x247*x254)));
evalcond[5]=(((sj0*x239*x247))+((x249*x251))+(((-1.0)*r02*x257))+(((-1.0)*r00*x243*x251))+(((-1.0)*r10*sj0*x239*x243))+x241+(((-1.0)*r12*x254))+(((-1.0)*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x258=((2.0)*sj1);
IkReal x259=(cj0*px);
IkReal x260=((2.0)*cj1);
IkReal x261=(py*sj0);
if( IKabs((((x259*x260))+((x260*x261))+(((-1.0)*pz*x258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x258*x261))+(((-1.0)*x258*x259))+(((-1.0)*pz*x260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x259*x260))+((x260*x261))+(((-1.0)*pz*x258))))+IKsqr(((1.4)+(((-1.0)*x258*x261))+(((-1.0)*x258*x259))+(((-1.0)*pz*x260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x259*x260))+((x260*x261))+(((-1.0)*pz*x258))), ((1.4)+(((-1.0)*x258*x261))+(((-1.0)*x258*x259))+(((-1.0)*pz*x260))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x262=IKsin(j2);
IkReal x263=IKcos(j2);
IkReal x264=((0.5)*cj1);
IkReal x265=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x262*x265))+((x263*x264))+pz);
evalcond[1]=((((-1.0)*x263*x265))+(((0.7)*sj1))+((x262*x264))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x266=cj5*cj5;
IkReal x267=r21*r21;
IkReal x268=((r22*r22)+x267+(((-2.0)*cj5*r20*r21*sj5))+((x266*(r20*r20)))+(((-1.0)*x266*x267)));
j4eval[0]=x268;
j4eval[1]=IKsign(x268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x269=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x269;
j4eval[1]=IKsign(x269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x270=cj5*cj5;
IkReal x271=(r00*sj0);
IkReal x272=((1.0)*sj0);
IkReal x273=(r01*r21);
IkReal x274=(cj0*r10);
IkReal x275=(cj0*r11*r21);
IkReal x276=(cj5*r21*sj5);
IkReal x277=((1.0)*x270);
IkReal x278=(cj5*r20*sj5);
IkReal x279=((((-1.0)*x272*x273))+(((-1.0)*r20*x271*x277))+((x271*x276))+(((-1.0)*x274*x276))+(((-1.0)*cj0*r11*x278))+(((-1.0)*r02*r22*x272))+x275+((cj0*r12*r22))+(((-1.0)*x275*x277))+((r20*x270*x274))+((sj0*x270*x273))+((r01*sj0*x278)));
j4eval[0]=x279;
j4eval[1]=IKsign(x279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x280=cj5*cj5;
IkReal x281=(sj1*sj2);
IkReal x282=(r01*sj0);
IkReal x283=(cj0*r10);
IkReal x284=((1.0)*sj5);
IkReal x285=(cj5*r21);
IkReal x286=(cj1*cj2);
IkReal x287=(cj0*r11);
IkReal x288=(cj5*r20);
IkReal x289=(cj0*r12);
IkReal x290=(r20*x280);
IkReal x291=((1.0)*r02*sj0);
IkReal x292=(r21*x280);
IkReal x293=((1.0)*r00*sj0);
CheckValue<IkReal> x294=IKPowWithIntegerCheck(IKsign(((((-1.0)*x290*x293))+((x282*x292))+((r21*x287))+((x283*x290))+((r00*sj0*sj5*x285))+((r22*x289))+(((-1.0)*x283*x284*x285))+((sj5*x282*x288))+(((-1.0)*r21*x282))+(((-1.0)*x287*x292))+(((-1.0)*r22*x291))+(((-1.0)*x284*x287*x288)))),-1);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x286*x293))+(((-1.0)*x284*x286*x287))+(((-1.0)*x281*x284*x287))+((cj5*x281*x283))+((cj5*x283*x286))+((sj5*x281*x282))+((sj5*x282*x286))+(((-1.0)*cj5*x281*x293)))),IkReal((((x286*x289))+(((-1.0)*x286*x291))+((x281*x289))+(((-1.0)*x281*x291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x294.value)))+(x295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x296=IKsin(j4);
IkReal x297=IKcos(j4);
IkReal x298=(cj5*r00);
IkReal x299=((1.0)*cj1);
IkReal x300=((1.0)*r01);
IkReal x301=((1.0)*sj1);
IkReal x302=(r11*sj5);
IkReal x303=(cj2*x299);
IkReal x304=(sj2*x301);
IkReal x305=(cj0*x296);
IkReal x306=(sj0*x297);
IkReal x307=(cj5*x296);
IkReal x308=((1.0)*x296);
IkReal x309=((1.0)*cj5*r10);
IkReal x310=(sj5*x297);
IkReal x311=(sj0*x296);
IkReal x312=(sj5*x311);
IkReal x313=((1.0)*cj0*x297);
IkReal x314=(x304+x303);
evalcond[0]=((((-1.0)*r21*sj5*x308))+(((-1.0)*x314))+((r20*x307))+((r22*x297)));
evalcond[1]=((((-1.0)*r22*x308))+(((-1.0)*cj2*x301))+((cj5*r20*x297))+((cj1*sj2))+(((-1.0)*r21*x310)));
evalcond[2]=(((x298*x311))+((r02*x306))+(((-1.0)*r12*x313))+(((-1.0)*x300*x312))+((x302*x305))+(((-1.0)*x305*x309)));
evalcond[3]=(((cj0*x297*x302))+((x298*x306))+(((-1.0)*r02*sj0*x308))+(((-1.0)*cj0*x297*x309))+(((-1.0)*sj5*x300*x306))+((r12*x305)));
evalcond[4]=(((cj0*r01*x310))+((r02*x305))+(((-1.0)*x306*x309))+(((-1.0)*x314))+((x302*x306))+((r12*x311))+(((-1.0)*x298*x313)));
evalcond[5]=(((x302*x311))+((cj2*sj1))+(((-1.0)*r02*x313))+(((-1.0)*r12*x306))+((r01*sj5*x305))+(((-1.0)*x298*x305))+(((-1.0)*sj2*x299))+(((-1.0)*r10*sj0*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x315=(cj1*cj2);
IkReal x316=(cj5*sj0);
IkReal x317=(sj1*sj2);
IkReal x318=(cj0*r12);
IkReal x319=(cj0*cj5);
IkReal x320=((1.0)*r10);
IkReal x321=(sj0*sj5);
IkReal x322=((1.0)*r01);
IkReal x323=(cj0*r11*sj5);
IkReal x324=((1.0)*r02*sj0);
CheckValue<IkReal> x325 = IKatan2WithCheck(IkReal((((x317*x318))+(((-1.0)*x317*x324))+(((-1.0)*x315*x324))+((x315*x318)))),IkReal(((((-1.0)*x315*x321*x322))+(((-1.0)*x317*x319*x320))+((r00*x316*x317))+(((-1.0)*x315*x319*x320))+(((-1.0)*x317*x321*x322))+((x315*x323))+((x317*x323))+((r00*x315*x316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x325.valid){
continue;
}
CheckValue<IkReal> x326=IKPowWithIntegerCheck(IKsign((((r11*x316))+((r01*x319))+((r10*x321))+((cj0*r00*sj5)))),-1);
if(!x326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x325.value)+(((1.5707963267949)*(x326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x327=IKsin(j4);
IkReal x328=IKcos(j4);
IkReal x329=(cj5*r00);
IkReal x330=((1.0)*cj1);
IkReal x331=((1.0)*r01);
IkReal x332=((1.0)*sj1);
IkReal x333=(r11*sj5);
IkReal x334=(cj2*x330);
IkReal x335=(sj2*x332);
IkReal x336=(cj0*x327);
IkReal x337=(sj0*x328);
IkReal x338=(cj5*x327);
IkReal x339=((1.0)*x327);
IkReal x340=((1.0)*cj5*r10);
IkReal x341=(sj5*x328);
IkReal x342=(sj0*x327);
IkReal x343=(sj5*x342);
IkReal x344=((1.0)*cj0*x328);
IkReal x345=(x335+x334);
evalcond[0]=((((-1.0)*r21*sj5*x339))+((r20*x338))+((r22*x328))+(((-1.0)*x345)));
evalcond[1]=((((-1.0)*r21*x341))+((cj1*sj2))+((cj5*r20*x328))+(((-1.0)*cj2*x332))+(((-1.0)*r22*x339)));
evalcond[2]=((((-1.0)*r12*x344))+(((-1.0)*x336*x340))+(((-1.0)*x331*x343))+((x329*x342))+((r02*x337))+((x333*x336)));
evalcond[3]=(((r12*x336))+((x329*x337))+(((-1.0)*r02*sj0*x339))+(((-1.0)*cj0*x328*x340))+(((-1.0)*sj5*x331*x337))+((cj0*x328*x333)));
evalcond[4]=(((cj0*r01*x341))+(((-1.0)*x337*x340))+((r02*x336))+((x333*x337))+(((-1.0)*x329*x344))+(((-1.0)*x345))+((r12*x342)));
evalcond[5]=((((-1.0)*sj2*x330))+(((-1.0)*r02*x344))+((cj2*sj1))+(((-1.0)*x329*x336))+(((-1.0)*r12*x337))+((r01*sj5*x336))+(((-1.0)*r10*sj0*x338))+((x333*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x346=cj5*cj5;
IkReal x347=r21*r21;
IkReal x348=(cj1*cj2);
IkReal x349=(sj1*sj2);
IkReal x350=(cj5*r20);
IkReal x351=(cj2*sj1);
IkReal x352=(r21*sj5);
IkReal x353=(cj1*sj2);
IkReal x354=((1.0)*x352);
CheckValue<IkReal> x355=IKPowWithIntegerCheck(IKsign(((((-2.0)*x350*x352))+(((-1.0)*x346*x347))+(r22*r22)+x347+((x346*(r20*r20))))),-1);
if(!x355.valid){
continue;
}
CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x351))+(((-1.0)*x348*x354))+(((-1.0)*x349*x354))+((r22*x353))+((x349*x350))+((x348*x350)))),IkReal((((x352*x353))+((r22*x348))+((r22*x349))+(((-1.0)*x350*x353))+((x350*x351))+(((-1.0)*x351*x354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x355.value)))+(x356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x357=IKsin(j4);
IkReal x358=IKcos(j4);
IkReal x359=(cj5*r00);
IkReal x360=((1.0)*cj1);
IkReal x361=((1.0)*r01);
IkReal x362=((1.0)*sj1);
IkReal x363=(r11*sj5);
IkReal x364=(cj2*x360);
IkReal x365=(sj2*x362);
IkReal x366=(cj0*x357);
IkReal x367=(sj0*x358);
IkReal x368=(cj5*x357);
IkReal x369=((1.0)*x357);
IkReal x370=((1.0)*cj5*r10);
IkReal x371=(sj5*x358);
IkReal x372=(sj0*x357);
IkReal x373=(sj5*x372);
IkReal x374=((1.0)*cj0*x358);
IkReal x375=(x364+x365);
evalcond[0]=(((r20*x368))+(((-1.0)*x375))+(((-1.0)*r21*sj5*x369))+((r22*x358)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r21*x371))+(((-1.0)*cj2*x362))+((cj5*r20*x358))+(((-1.0)*r22*x369)));
evalcond[2]=((((-1.0)*x361*x373))+(((-1.0)*x366*x370))+((x359*x372))+(((-1.0)*r12*x374))+((x363*x366))+((r02*x367)));
evalcond[3]=((((-1.0)*sj5*x361*x367))+((x359*x367))+((cj0*x358*x363))+(((-1.0)*cj0*x358*x370))+((r12*x366))+(((-1.0)*r02*sj0*x369)));
evalcond[4]=((((-1.0)*x375))+((cj0*r01*x371))+(((-1.0)*x367*x370))+(((-1.0)*x359*x374))+((r12*x372))+((x363*x367))+((r02*x366)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x374))+((r01*sj5*x366))+(((-1.0)*sj2*x360))+(((-1.0)*x359*x366))+(((-1.0)*r10*sj0*x368))+(((-1.0)*r12*x367))+((x363*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((-1.0)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x376=((2.0)*sj1);
IkReal x377=(cj0*px);
IkReal x378=((2.0)*cj1);
IkReal x379=(py*sj0);
if( IKabs((((x378*x379))+((x377*x378))+(((-1.0)*pz*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*pz*x378))+(((-1.0)*x376*x377))+(((-1.0)*x376*x379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x378*x379))+((x377*x378))+(((-1.0)*pz*x376))))+IKsqr(((1.4)+(((-1.0)*pz*x378))+(((-1.0)*x376*x377))+(((-1.0)*x376*x379))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x378*x379))+((x377*x378))+(((-1.0)*pz*x376))), ((1.4)+(((-1.0)*pz*x378))+(((-1.0)*x376*x377))+(((-1.0)*x376*x379))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x380=IKsin(j2);
IkReal x381=IKcos(j2);
IkReal x382=((0.5)*cj1);
IkReal x383=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+pz+((x380*x383))+((x381*x382)));
evalcond[1]=((((0.7)*sj1))+(((-1.0)*x381*x383))+(((-1.0)*py*sj0))+((x380*x382))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x384=cj5*cj5;
IkReal x385=r21*r21;
IkReal x386=((r22*r22)+(((-1.0)*x384*x385))+x385+(((-2.0)*cj5*r20*r21*sj5))+((x384*(r20*r20))));
j4eval[0]=x386;
j4eval[1]=IKsign(x386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x387=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x387;
j4eval[1]=IKsign(x387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x388=cj5*cj5;
IkReal x389=(r00*sj0);
IkReal x390=((1.0)*sj0);
IkReal x391=(r01*r21);
IkReal x392=(cj0*r10);
IkReal x393=(cj0*r11*r21);
IkReal x394=(cj5*r21*sj5);
IkReal x395=((1.0)*x388);
IkReal x396=(cj5*r20*sj5);
IkReal x397=((((-1.0)*r02*r22*x390))+x393+(((-1.0)*cj0*r11*x396))+((r20*x388*x392))+((cj0*r12*r22))+(((-1.0)*x390*x391))+((r01*sj0*x396))+(((-1.0)*r20*x389*x395))+((x389*x394))+(((-1.0)*x392*x394))+(((-1.0)*x393*x395))+((sj0*x388*x391)));
j4eval[0]=x397;
j4eval[1]=IKsign(x397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x398=cj5*cj5;
IkReal x399=(sj1*sj2);
IkReal x400=(r01*sj0);
IkReal x401=(cj0*r10);
IkReal x402=((1.0)*sj5);
IkReal x403=(cj5*r21);
IkReal x404=(cj1*cj2);
IkReal x405=(cj0*r11);
IkReal x406=(cj5*r20);
IkReal x407=(cj0*r12);
IkReal x408=(r20*x398);
IkReal x409=((1.0)*r02*sj0);
IkReal x410=(r21*x398);
IkReal x411=((1.0)*r00*sj0);
CheckValue<IkReal> x412=IKPowWithIntegerCheck(IKsign((((r22*x407))+((sj5*x400*x406))+(((-1.0)*r21*x400))+((r21*x405))+((r00*sj0*sj5*x403))+(((-1.0)*x405*x410))+(((-1.0)*x402*x405*x406))+((x400*x410))+(((-1.0)*x401*x402*x403))+(((-1.0)*x408*x411))+(((-1.0)*r22*x409))+((x401*x408)))),-1);
if(!x412.valid){
continue;
}
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal((((cj5*x401*x404))+((cj5*x399*x401))+(((-1.0)*cj5*x404*x411))+((sj5*x399*x400))+((sj5*x400*x404))+(((-1.0)*cj5*x399*x411))+(((-1.0)*x399*x402*x405))+(((-1.0)*x402*x404*x405)))),IkReal((((x404*x407))+(((-1.0)*x404*x409))+(((-1.0)*x399*x409))+((x399*x407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x412.value)))+(x413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x414=IKsin(j4);
IkReal x415=IKcos(j4);
IkReal x416=(cj2*sj1);
IkReal x417=(sj1*sj2);
IkReal x418=((1.0)*cj5);
IkReal x419=((1.0)*cj1);
IkReal x420=((1.0)*r01);
IkReal x421=(r02*sj0);
IkReal x422=(r11*sj5);
IkReal x423=(r21*sj5);
IkReal x424=(r01*sj5);
IkReal x425=(sj2*x419);
IkReal x426=(cj0*x414);
IkReal x427=(cj5*x414);
IkReal x428=((1.0)*x414);
IkReal x429=(sj0*x415);
IkReal x430=(cj0*x415);
IkReal x431=(sj0*sj5*x414);
IkReal x432=((1.0)*x430);
evalcond[0]=(((r20*x427))+(((-1.0)*cj2*x419))+((r22*x415))+(((-1.0)*x423*x428))+(((-1.0)*x417)));
evalcond[1]=((((-1.0)*x425))+x416+(((-1.0)*x415*x423))+((cj5*r20*x415))+(((-1.0)*r22*x428)));
evalcond[2]=((((-1.0)*r12*x432))+(((-1.0)*r10*x418*x426))+(((-1.0)*x420*x431))+((x415*x421))+((r00*sj0*x427))+((x422*x426)));
evalcond[3]=((((-1.0)*x421*x428))+(((-1.0)*r10*x418*x430))+((cj5*r00*x429))+(((-1.0)*sj5*x420*x429))+((r12*x426))+((x422*x430)));
evalcond[4]=(((x424*x430))+(((-1.0)*r10*x418*x429))+((r12*sj0*x414))+((r02*x426))+x417+((cj1*cj2))+(((-1.0)*r00*x418*x430))+((x422*x429)));
evalcond[5]=((((-1.0)*r12*x429))+((x424*x426))+(((-1.0)*r10*sj0*x414*x418))+(((-1.0)*x425))+x416+(((-1.0)*r02*x432))+(((-1.0)*r00*x418*x426))+((sj0*x414*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x433=(cj1*cj2);
IkReal x434=(cj5*sj0);
IkReal x435=(sj1*sj2);
IkReal x436=(cj0*r12);
IkReal x437=(cj0*cj5);
IkReal x438=((1.0)*r10);
IkReal x439=(sj0*sj5);
IkReal x440=((1.0)*r01);
IkReal x441=(cj0*r11*sj5);
IkReal x442=((1.0)*r02*sj0);
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal(((((-1.0)*x433*x442))+(((-1.0)*x435*x442))+((x433*x436))+((x435*x436)))),IkReal((((x435*x441))+(((-1.0)*x435*x439*x440))+(((-1.0)*x433*x437*x438))+(((-1.0)*x433*x439*x440))+((r00*x434*x435))+((r00*x433*x434))+(((-1.0)*x435*x437*x438))+((x433*x441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
CheckValue<IkReal> x444=IKPowWithIntegerCheck(IKsign((((cj0*r00*sj5))+((r01*x437))+((r10*x439))+((r11*x434)))),-1);
if(!x444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x443.value)+(((1.5707963267949)*(x444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x445=IKsin(j4);
IkReal x446=IKcos(j4);
IkReal x447=(cj2*sj1);
IkReal x448=(sj1*sj2);
IkReal x449=((1.0)*cj5);
IkReal x450=((1.0)*cj1);
IkReal x451=((1.0)*r01);
IkReal x452=(r02*sj0);
IkReal x453=(r11*sj5);
IkReal x454=(r21*sj5);
IkReal x455=(r01*sj5);
IkReal x456=(sj2*x450);
IkReal x457=(cj0*x445);
IkReal x458=(cj5*x445);
IkReal x459=((1.0)*x445);
IkReal x460=(sj0*x446);
IkReal x461=(cj0*x446);
IkReal x462=(sj0*sj5*x445);
IkReal x463=((1.0)*x461);
evalcond[0]=((((-1.0)*x448))+((r20*x458))+(((-1.0)*x454*x459))+((r22*x446))+(((-1.0)*cj2*x450)));
evalcond[1]=(((cj5*r20*x446))+(((-1.0)*x446*x454))+(((-1.0)*x456))+x447+(((-1.0)*r22*x459)));
evalcond[2]=(((x453*x457))+(((-1.0)*r10*x449*x457))+((x446*x452))+(((-1.0)*r12*x463))+(((-1.0)*x451*x462))+((r00*sj0*x458)));
evalcond[3]=(((cj5*r00*x460))+(((-1.0)*sj5*x451*x460))+((x453*x461))+(((-1.0)*r10*x449*x461))+(((-1.0)*x452*x459))+((r12*x457)));
evalcond[4]=(((x455*x461))+((x453*x460))+(((-1.0)*r10*x449*x460))+x448+(((-1.0)*r00*x449*x461))+((r02*x457))+((cj1*cj2))+((r12*sj0*x445)));
evalcond[5]=(((x455*x457))+(((-1.0)*x456))+x447+(((-1.0)*r12*x460))+(((-1.0)*r00*x449*x457))+(((-1.0)*r02*x463))+((sj0*x445*x453))+(((-1.0)*r10*sj0*x445*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x464=cj5*cj5;
IkReal x465=r21*r21;
IkReal x466=(cj5*r20);
IkReal x467=((1.0)*sj1);
IkReal x468=(cj1*sj2);
IkReal x469=(r21*sj5);
IkReal x470=(cj1*cj2);
IkReal x471=(r22*sj1);
CheckValue<IkReal> x472 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x467*x469))+(((-1.0)*r22*x468))+((cj2*x471))+((x466*x470))+((sj1*sj2*x466))+(((-1.0)*x469*x470)))),IkReal((((cj2*sj1*x469))+((x466*x468))+(((-1.0)*x468*x469))+(((-1.0)*cj2*x466*x467))+((r22*x470))+((sj2*x471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x472.valid){
continue;
}
CheckValue<IkReal> x473=IKPowWithIntegerCheck(IKsign(((((-2.0)*x466*x469))+((x464*(r20*r20)))+(r22*r22)+(((-1.0)*x464*x465))+x465)),-1);
if(!x473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x472.value)+(((1.5707963267949)*(x473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x474=IKsin(j4);
IkReal x475=IKcos(j4);
IkReal x476=(cj2*sj1);
IkReal x477=(sj1*sj2);
IkReal x478=((1.0)*cj5);
IkReal x479=((1.0)*cj1);
IkReal x480=((1.0)*r01);
IkReal x481=(r02*sj0);
IkReal x482=(r11*sj5);
IkReal x483=(r21*sj5);
IkReal x484=(r01*sj5);
IkReal x485=(sj2*x479);
IkReal x486=(cj0*x474);
IkReal x487=(cj5*x474);
IkReal x488=((1.0)*x474);
IkReal x489=(sj0*x475);
IkReal x490=(cj0*x475);
IkReal x491=(sj0*sj5*x474);
IkReal x492=((1.0)*x490);
evalcond[0]=(((r20*x487))+(((-1.0)*x483*x488))+(((-1.0)*x477))+((r22*x475))+(((-1.0)*cj2*x479)));
evalcond[1]=((((-1.0)*x485))+(((-1.0)*x475*x483))+((cj5*r20*x475))+x476+(((-1.0)*r22*x488)));
evalcond[2]=(((x475*x481))+(((-1.0)*r10*x478*x486))+(((-1.0)*x480*x491))+((r00*sj0*x487))+(((-1.0)*r12*x492))+((x482*x486)));
evalcond[3]=(((cj5*r00*x489))+((r12*x486))+(((-1.0)*r10*x478*x490))+(((-1.0)*x481*x488))+(((-1.0)*sj5*x480*x489))+((x482*x490)));
evalcond[4]=(((r02*x486))+(((-1.0)*r10*x478*x489))+x477+((r12*sj0*x474))+(((-1.0)*r00*x478*x490))+((cj1*cj2))+((x482*x489))+((x484*x490)));
evalcond[5]=(((x484*x486))+(((-1.0)*x485))+(((-1.0)*r02*x492))+((sj0*x474*x482))+x476+(((-1.0)*r10*sj0*x474*x478))+(((-1.0)*r00*x478*x486))+(((-1.0)*r12*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x493=((2.0)*sj1);
IkReal x494=(cj0*px);
IkReal x495=((2.0)*cj1);
IkReal x496=(py*sj0);
if( IKabs((((x495*x496))+((x494*x495))+(((-1.0)*pz*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x493*x494))+(((-1.0)*x493*x496))+(((-1.0)*pz*x495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x495*x496))+((x494*x495))+(((-1.0)*pz*x493))))+IKsqr(((1.4)+(((-1.0)*x493*x494))+(((-1.0)*x493*x496))+(((-1.0)*pz*x495))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x495*x496))+((x494*x495))+(((-1.0)*pz*x493))), ((1.4)+(((-1.0)*x493*x494))+(((-1.0)*x493*x496))+(((-1.0)*pz*x495))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x497=IKsin(j2);
IkReal x498=IKcos(j2);
IkReal x499=((0.5)*cj1);
IkReal x500=((0.5)*sj1);
evalcond[0]=(((x497*x500))+(((-0.7)*cj1))+pz+((x498*x499)));
evalcond[1]=((((0.7)*sj1))+((x497*x499))+(((-1.0)*py*sj0))+(((-1.0)*x498*x500))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x501=cj5*cj5;
IkReal x502=r21*r21;
IkReal x503=((r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x501*x502))+x502+((x501*(r20*r20))));
j4eval[0]=x503;
j4eval[1]=IKsign(x503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x504=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x504;
j4eval[1]=IKsign(x504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x505=cj5*cj5;
IkReal x506=(r00*sj0);
IkReal x507=((1.0)*sj0);
IkReal x508=(r01*r21);
IkReal x509=(cj0*r10);
IkReal x510=(cj0*r11*r21);
IkReal x511=(cj5*r21*sj5);
IkReal x512=((1.0)*x505);
IkReal x513=(cj5*r20*sj5);
IkReal x514=((((-1.0)*r20*x506*x512))+((r20*x505*x509))+(((-1.0)*x507*x508))+(((-1.0)*cj0*r11*x513))+(((-1.0)*x509*x511))+x510+((cj0*r12*r22))+((sj0*x505*x508))+(((-1.0)*r02*r22*x507))+((x506*x511))+((r01*sj0*x513))+(((-1.0)*x510*x512)));
j4eval[0]=x514;
j4eval[1]=IKsign(x514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x515=cj5*cj5;
IkReal x516=(sj1*sj2);
IkReal x517=(r01*sj0);
IkReal x518=(cj0*r10);
IkReal x519=((1.0)*sj5);
IkReal x520=(cj5*r21);
IkReal x521=(cj1*cj2);
IkReal x522=(cj0*r11);
IkReal x523=(cj5*r20);
IkReal x524=(cj0*r12);
IkReal x525=(r20*x515);
IkReal x526=((1.0)*r02*sj0);
IkReal x527=(r21*x515);
IkReal x528=((1.0)*r00*sj0);
CheckValue<IkReal> x529=IKPowWithIntegerCheck(IKsign((((r21*x522))+(((-1.0)*x522*x527))+(((-1.0)*x519*x522*x523))+(((-1.0)*x525*x528))+((sj5*x517*x523))+(((-1.0)*x518*x519*x520))+((x517*x527))+((x518*x525))+((r22*x524))+((r00*sj0*sj5*x520))+(((-1.0)*r21*x517))+(((-1.0)*r22*x526)))),-1);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530 = IKatan2WithCheck(IkReal((((sj5*x517*x521))+(((-1.0)*x519*x521*x522))+((sj5*x516*x517))+(((-1.0)*cj5*x521*x528))+(((-1.0)*x516*x519*x522))+(((-1.0)*cj5*x516*x528))+((cj5*x518*x521))+((cj5*x516*x518)))),IkReal(((((-1.0)*x521*x526))+((x516*x524))+((x521*x524))+(((-1.0)*x516*x526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x529.value)))+(x530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x531=IKsin(j4);
IkReal x532=IKcos(j4);
IkReal x533=(cj2*sj1);
IkReal x534=(sj1*sj2);
IkReal x535=((1.0)*cj5);
IkReal x536=((1.0)*cj1);
IkReal x537=((1.0)*r01);
IkReal x538=(r02*sj0);
IkReal x539=(r11*sj5);
IkReal x540=(r21*sj5);
IkReal x541=(r01*sj5);
IkReal x542=(sj2*x536);
IkReal x543=(cj0*x531);
IkReal x544=(cj5*x531);
IkReal x545=((1.0)*x531);
IkReal x546=(sj0*x532);
IkReal x547=(cj0*x532);
IkReal x548=(sj0*sj5*x531);
IkReal x549=((1.0)*x547);
evalcond[0]=((((-1.0)*cj2*x536))+((r20*x544))+(((-1.0)*x534))+(((-1.0)*x540*x545))+((r22*x532)));
evalcond[1]=((((-1.0)*x532*x540))+(((-1.0)*r22*x545))+((cj5*r20*x532))+(((-1.0)*x542))+x533);
evalcond[2]=(((x539*x543))+(((-1.0)*x537*x548))+(((-1.0)*r10*x535*x543))+((r00*sj0*x544))+((x532*x538))+(((-1.0)*r12*x549)));
evalcond[3]=(((x539*x547))+(((-1.0)*sj5*x537*x546))+(((-1.0)*r10*x535*x547))+(((-1.0)*x538*x545))+((r12*x543))+((cj5*r00*x546)));
evalcond[4]=(((x539*x546))+((r12*sj0*x531))+((x541*x547))+((r02*x543))+(((-1.0)*r10*x535*x546))+x534+(((-1.0)*r00*x535*x547))+((cj1*cj2)));
evalcond[5]=(((x541*x543))+(((-1.0)*x542))+(((-1.0)*r02*x549))+x533+(((-1.0)*r12*x546))+(((-1.0)*r00*x535*x543))+(((-1.0)*r10*sj0*x531*x535))+((sj0*x531*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x550=(cj1*cj2);
IkReal x551=(cj5*sj0);
IkReal x552=(sj1*sj2);
IkReal x553=(cj0*r12);
IkReal x554=(cj0*cj5);
IkReal x555=((1.0)*r10);
IkReal x556=(sj0*sj5);
IkReal x557=((1.0)*r01);
IkReal x558=(cj0*r11*sj5);
IkReal x559=((1.0)*r02*sj0);
CheckValue<IkReal> x560=IKPowWithIntegerCheck(IKsign((((r10*x556))+((r11*x551))+((cj0*r00*sj5))+((r01*x554)))),-1);
if(!x560.valid){
continue;
}
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(((((-1.0)*x550*x559))+(((-1.0)*x552*x559))+((x550*x553))+((x552*x553)))),IkReal(((((-1.0)*x550*x556*x557))+((r00*x550*x551))+((r00*x551*x552))+(((-1.0)*x550*x554*x555))+(((-1.0)*x552*x556*x557))+(((-1.0)*x552*x554*x555))+((x550*x558))+((x552*x558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x560.value)))+(x561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x562=IKsin(j4);
IkReal x563=IKcos(j4);
IkReal x564=(cj2*sj1);
IkReal x565=(sj1*sj2);
IkReal x566=((1.0)*cj5);
IkReal x567=((1.0)*cj1);
IkReal x568=((1.0)*r01);
IkReal x569=(r02*sj0);
IkReal x570=(r11*sj5);
IkReal x571=(r21*sj5);
IkReal x572=(r01*sj5);
IkReal x573=(sj2*x567);
IkReal x574=(cj0*x562);
IkReal x575=(cj5*x562);
IkReal x576=((1.0)*x562);
IkReal x577=(sj0*x563);
IkReal x578=(cj0*x563);
IkReal x579=(sj0*sj5*x562);
IkReal x580=((1.0)*x578);
evalcond[0]=(((r22*x563))+((r20*x575))+(((-1.0)*x571*x576))+(((-1.0)*x565))+(((-1.0)*cj2*x567)));
evalcond[1]=((((-1.0)*x573))+x564+(((-1.0)*x563*x571))+((cj5*r20*x563))+(((-1.0)*r22*x576)));
evalcond[2]=(((x563*x569))+((r00*sj0*x575))+(((-1.0)*r12*x580))+(((-1.0)*x568*x579))+(((-1.0)*r10*x566*x574))+((x570*x574)));
evalcond[3]=(((cj5*r00*x577))+((r12*x574))+(((-1.0)*x569*x576))+(((-1.0)*sj5*x568*x577))+(((-1.0)*r10*x566*x578))+((x570*x578)));
evalcond[4]=((((-1.0)*r00*x566*x578))+((r12*sj0*x562))+((r02*x574))+x565+((cj1*cj2))+((x572*x578))+(((-1.0)*r10*x566*x577))+((x570*x577)));
evalcond[5]=((((-1.0)*r02*x580))+(((-1.0)*r12*x577))+(((-1.0)*r00*x566*x574))+((sj0*x562*x570))+(((-1.0)*r10*sj0*x562*x566))+(((-1.0)*x573))+x564+((x572*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x581=cj5*cj5;
IkReal x582=r21*r21;
IkReal x583=(cj5*r20);
IkReal x584=((1.0)*sj1);
IkReal x585=(cj1*sj2);
IkReal x586=(r21*sj5);
IkReal x587=(cj1*cj2);
IkReal x588=(r22*sj1);
CheckValue<IkReal> x589 = IKatan2WithCheck(IkReal((((x583*x587))+((sj1*sj2*x583))+(((-1.0)*r22*x585))+((cj2*x588))+(((-1.0)*x586*x587))+(((-1.0)*sj2*x584*x586)))),IkReal((((x583*x585))+((sj2*x588))+((cj2*sj1*x586))+((r22*x587))+(((-1.0)*cj2*x583*x584))+(((-1.0)*x585*x586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x589.valid){
continue;
}
CheckValue<IkReal> x590=IKPowWithIntegerCheck(IKsign(((((-1.0)*x581*x582))+(r22*r22)+(((-2.0)*x583*x586))+x582+((x581*(r20*r20))))),-1);
if(!x590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x589.value)+(((1.5707963267949)*(x590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x591=IKsin(j4);
IkReal x592=IKcos(j4);
IkReal x593=(cj2*sj1);
IkReal x594=(sj1*sj2);
IkReal x595=((1.0)*cj5);
IkReal x596=((1.0)*cj1);
IkReal x597=((1.0)*r01);
IkReal x598=(r02*sj0);
IkReal x599=(r11*sj5);
IkReal x600=(r21*sj5);
IkReal x601=(r01*sj5);
IkReal x602=(sj2*x596);
IkReal x603=(cj0*x591);
IkReal x604=(cj5*x591);
IkReal x605=((1.0)*x591);
IkReal x606=(sj0*x592);
IkReal x607=(cj0*x592);
IkReal x608=(sj0*sj5*x591);
IkReal x609=((1.0)*x607);
evalcond[0]=(((r22*x592))+((r20*x604))+(((-1.0)*x594))+(((-1.0)*cj2*x596))+(((-1.0)*x600*x605)));
evalcond[1]=((((-1.0)*x592*x600))+(((-1.0)*r22*x605))+((cj5*r20*x592))+x593+(((-1.0)*x602)));
evalcond[2]=((((-1.0)*x597*x608))+(((-1.0)*r12*x609))+((x599*x603))+((r00*sj0*x604))+(((-1.0)*r10*x595*x603))+((x592*x598)));
evalcond[3]=((((-1.0)*sj5*x597*x606))+((r12*x603))+(((-1.0)*x598*x605))+((cj5*r00*x606))+((x599*x607))+(((-1.0)*r10*x595*x607)));
evalcond[4]=(((x601*x607))+(((-1.0)*r00*x595*x607))+x594+((r02*x603))+((cj1*cj2))+((x599*x606))+((r12*sj0*x591))+(((-1.0)*r10*x595*x606)));
evalcond[5]=(((x601*x603))+(((-1.0)*r12*x606))+(((-1.0)*r00*x595*x603))+x593+(((-1.0)*r10*sj0*x591*x595))+(((-1.0)*x602))+(((-1.0)*r02*x609))+((sj0*x591*x599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((1.0)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x610=((2.0)*sj1);
IkReal x611=(cj0*px);
IkReal x612=((2.0)*cj1);
IkReal x613=(py*sj0);
if( IKabs((((x611*x612))+((x612*x613))+(((-1.0)*pz*x610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x610*x611))+(((-1.0)*x610*x613))+(((-1.0)*pz*x612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x611*x612))+((x612*x613))+(((-1.0)*pz*x610))))+IKsqr(((1.4)+(((-1.0)*x610*x611))+(((-1.0)*x610*x613))+(((-1.0)*pz*x612))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x611*x612))+((x612*x613))+(((-1.0)*pz*x610))), ((1.4)+(((-1.0)*x610*x611))+(((-1.0)*x610*x613))+(((-1.0)*pz*x612))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x614=IKsin(j2);
IkReal x615=IKcos(j2);
IkReal x616=((0.5)*cj1);
IkReal x617=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+pz+((x614*x617))+((x615*x616)));
evalcond[1]=((((0.7)*sj1))+((x614*x616))+(((-1.0)*py*sj0))+(((-1.0)*x615*x617))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x618=cj5*cj5;
IkReal x619=r21*r21;
IkReal x620=((r22*r22)+((x618*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj5))+x619+(((-1.0)*x618*x619)));
j4eval[0]=x620;
j4eval[1]=IKsign(x620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x621=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x621;
j4eval[1]=IKsign(x621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x622=cj5*cj5;
IkReal x623=(r00*sj0);
IkReal x624=((1.0)*sj0);
IkReal x625=(r01*r21);
IkReal x626=(cj0*r10);
IkReal x627=(cj0*r11*r21);
IkReal x628=(cj5*r21*sj5);
IkReal x629=((1.0)*x622);
IkReal x630=(cj5*r20*sj5);
IkReal x631=((((-1.0)*cj0*r11*x630))+((r20*x622*x626))+(((-1.0)*x624*x625))+((r01*sj0*x630))+(((-1.0)*x627*x629))+x627+((cj0*r12*r22))+(((-1.0)*r02*r22*x624))+(((-1.0)*r20*x623*x629))+((x623*x628))+((sj0*x622*x625))+(((-1.0)*x626*x628)));
j4eval[0]=x631;
j4eval[1]=IKsign(x631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x632=cj5*cj5;
IkReal x633=(sj1*sj2);
IkReal x634=(r01*sj0);
IkReal x635=(cj0*r10);
IkReal x636=((1.0)*sj5);
IkReal x637=(cj5*r21);
IkReal x638=(cj1*cj2);
IkReal x639=(cj0*r11);
IkReal x640=(cj5*r20);
IkReal x641=(cj0*r12);
IkReal x642=(r20*x632);
IkReal x643=((1.0)*r02*sj0);
IkReal x644=(r21*x632);
IkReal x645=((1.0)*r00*sj0);
CheckValue<IkReal> x646=IKPowWithIntegerCheck(IKsign((((r21*x639))+(((-1.0)*x642*x645))+((x635*x642))+((sj5*x634*x640))+(((-1.0)*x636*x639*x640))+(((-1.0)*x639*x644))+(((-1.0)*r21*x634))+((r00*sj0*sj5*x637))+(((-1.0)*r22*x643))+((x634*x644))+((r22*x641))+(((-1.0)*x635*x636*x637)))),-1);
if(!x646.valid){
continue;
}
CheckValue<IkReal> x647 = IKatan2WithCheck(IkReal((((cj5*x635*x638))+((sj5*x634*x638))+(((-1.0)*x636*x638*x639))+((cj5*x633*x635))+((sj5*x633*x634))+(((-1.0)*x633*x636*x639))+(((-1.0)*cj5*x638*x645))+(((-1.0)*cj5*x633*x645)))),IkReal((((x638*x641))+(((-1.0)*x633*x643))+((x633*x641))+(((-1.0)*x638*x643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x646.value)))+(x647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x648=IKsin(j4);
IkReal x649=IKcos(j4);
IkReal x650=(cj5*r00);
IkReal x651=((1.0)*cj1);
IkReal x652=((1.0)*r01);
IkReal x653=((1.0)*sj1);
IkReal x654=(r11*sj5);
IkReal x655=(cj2*x651);
IkReal x656=(sj2*x653);
IkReal x657=(cj0*x648);
IkReal x658=(sj0*x649);
IkReal x659=(cj5*x648);
IkReal x660=((1.0)*x648);
IkReal x661=((1.0)*cj5*r10);
IkReal x662=(sj5*x649);
IkReal x663=(sj0*x648);
IkReal x664=(sj5*x663);
IkReal x665=((1.0)*cj0*x649);
IkReal x666=(x655+x656);
evalcond[0]=((((-1.0)*x666))+(((-1.0)*r21*sj5*x660))+((r22*x649))+((r20*x659)));
evalcond[1]=((((-1.0)*r21*x662))+((cj5*r20*x649))+(((-1.0)*r22*x660))+((cj1*sj2))+(((-1.0)*cj2*x653)));
evalcond[2]=(((r02*x658))+((x654*x657))+(((-1.0)*r12*x665))+(((-1.0)*x657*x661))+((x650*x663))+(((-1.0)*x652*x664)));
evalcond[3]=((((-1.0)*sj5*x652*x658))+(((-1.0)*r02*sj0*x660))+(((-1.0)*cj0*x649*x661))+((cj0*x649*x654))+((r12*x657))+((x650*x658)));
evalcond[4]=(((r02*x657))+((cj0*r01*x662))+((x654*x658))+((r12*x663))+(((-1.0)*x658*x661))+(((-1.0)*x666))+(((-1.0)*x650*x665)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*sj2*x651))+(((-1.0)*r10*sj0*x659))+(((-1.0)*x650*x657))+((x654*x663))+((r01*sj5*x657))+(((-1.0)*r12*x658))+(((-1.0)*r02*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x667=(cj1*cj2);
IkReal x668=(cj5*sj0);
IkReal x669=(sj1*sj2);
IkReal x670=(cj0*r12);
IkReal x671=(cj0*cj5);
IkReal x672=((1.0)*r10);
IkReal x673=(sj0*sj5);
IkReal x674=((1.0)*r01);
IkReal x675=(cj0*r11*sj5);
IkReal x676=((1.0)*r02*sj0);
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign((((r10*x673))+((r01*x671))+((r11*x668))+((cj0*r00*sj5)))),-1);
if(!x677.valid){
continue;
}
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal((((x669*x670))+((x667*x670))+(((-1.0)*x667*x676))+(((-1.0)*x669*x676)))),IkReal(((((-1.0)*x669*x671*x672))+(((-1.0)*x669*x673*x674))+((r00*x667*x668))+((x669*x675))+((x667*x675))+(((-1.0)*x667*x673*x674))+(((-1.0)*x667*x671*x672))+((r00*x668*x669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x677.value)))+(x678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x679=IKsin(j4);
IkReal x680=IKcos(j4);
IkReal x681=(cj5*r00);
IkReal x682=((1.0)*cj1);
IkReal x683=((1.0)*r01);
IkReal x684=((1.0)*sj1);
IkReal x685=(r11*sj5);
IkReal x686=(cj2*x682);
IkReal x687=(sj2*x684);
IkReal x688=(cj0*x679);
IkReal x689=(sj0*x680);
IkReal x690=(cj5*x679);
IkReal x691=((1.0)*x679);
IkReal x692=((1.0)*cj5*r10);
IkReal x693=(sj5*x680);
IkReal x694=(sj0*x679);
IkReal x695=(sj5*x694);
IkReal x696=((1.0)*cj0*x680);
IkReal x697=(x687+x686);
evalcond[0]=(((r22*x680))+((r20*x690))+(((-1.0)*x697))+(((-1.0)*r21*sj5*x691)));
evalcond[1]=(((cj1*sj2))+((cj5*r20*x680))+(((-1.0)*r21*x693))+(((-1.0)*cj2*x684))+(((-1.0)*r22*x691)));
evalcond[2]=(((x685*x688))+(((-1.0)*r12*x696))+(((-1.0)*x683*x695))+((x681*x694))+(((-1.0)*x688*x692))+((r02*x689)));
evalcond[3]=((((-1.0)*r02*sj0*x691))+((x681*x689))+(((-1.0)*sj5*x683*x689))+((cj0*x680*x685))+((r12*x688))+(((-1.0)*cj0*x680*x692)));
evalcond[4]=(((cj0*r01*x693))+((x685*x689))+((r12*x694))+(((-1.0)*x697))+(((-1.0)*x689*x692))+((r02*x688))+(((-1.0)*x681*x696)));
evalcond[5]=((((-1.0)*r10*sj0*x690))+((cj2*sj1))+(((-1.0)*x681*x688))+(((-1.0)*r12*x689))+(((-1.0)*r02*x696))+(((-1.0)*sj2*x682))+((x685*x694))+((r01*sj5*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x698=cj5*cj5;
IkReal x699=r21*r21;
IkReal x700=(cj1*cj2);
IkReal x701=(sj1*sj2);
IkReal x702=(cj5*r20);
IkReal x703=(cj2*sj1);
IkReal x704=(r21*sj5);
IkReal x705=(cj1*sj2);
IkReal x706=((1.0)*x704);
CheckValue<IkReal> x707=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x698*(r20*r20)))+(((-1.0)*x698*x699))+(((-2.0)*x702*x704))+x699)),-1);
if(!x707.valid){
continue;
}
CheckValue<IkReal> x708 = IKatan2WithCheck(IkReal((((r22*x705))+((x701*x702))+((x700*x702))+(((-1.0)*x701*x706))+(((-1.0)*x700*x706))+(((-1.0)*r22*x703)))),IkReal((((r22*x700))+((r22*x701))+(((-1.0)*x702*x705))+((x702*x703))+(((-1.0)*x703*x706))+((x704*x705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x707.value)))+(x708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x709=IKsin(j4);
IkReal x710=IKcos(j4);
IkReal x711=(cj5*r00);
IkReal x712=((1.0)*cj1);
IkReal x713=((1.0)*r01);
IkReal x714=((1.0)*sj1);
IkReal x715=(r11*sj5);
IkReal x716=(cj2*x712);
IkReal x717=(sj2*x714);
IkReal x718=(cj0*x709);
IkReal x719=(sj0*x710);
IkReal x720=(cj5*x709);
IkReal x721=((1.0)*x709);
IkReal x722=((1.0)*cj5*r10);
IkReal x723=(sj5*x710);
IkReal x724=(sj0*x709);
IkReal x725=(sj5*x724);
IkReal x726=((1.0)*cj0*x710);
IkReal x727=(x717+x716);
evalcond[0]=(((r22*x710))+((r20*x720))+(((-1.0)*x727))+(((-1.0)*r21*sj5*x721)));
evalcond[1]=((((-1.0)*r21*x723))+((cj5*r20*x710))+((cj1*sj2))+(((-1.0)*cj2*x714))+(((-1.0)*r22*x721)));
evalcond[2]=((((-1.0)*r12*x726))+(((-1.0)*x713*x725))+((x715*x718))+((x711*x724))+((r02*x719))+(((-1.0)*x718*x722)));
evalcond[3]=((((-1.0)*cj0*x710*x722))+(((-1.0)*sj5*x713*x719))+((x711*x719))+((cj0*x710*x715))+((r12*x718))+(((-1.0)*r02*sj0*x721)));
evalcond[4]=(((x715*x719))+(((-1.0)*x727))+((cj0*r01*x723))+(((-1.0)*x719*x722))+((r02*x718))+((r12*x724))+(((-1.0)*x711*x726)));
evalcond[5]=(((cj2*sj1))+((r01*sj5*x718))+(((-1.0)*r12*x719))+(((-1.0)*r02*x726))+(((-1.0)*x711*x718))+(((-1.0)*r10*sj0*x720))+(((-1.0)*sj2*x712))+((x715*x724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x728=((2.0)*sj1);
IkReal x729=(cj0*px);
IkReal x730=((2.0)*cj1);
IkReal x731=(py*sj0);
if( IKabs((((x729*x730))+(((-1.0)*pz*x728))+((x730*x731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*pz*x730))+(((-1.0)*x728*x731))+(((-1.0)*x728*x729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x729*x730))+(((-1.0)*pz*x728))+((x730*x731))))+IKsqr(((1.4)+(((-1.0)*pz*x730))+(((-1.0)*x728*x731))+(((-1.0)*x728*x729))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x729*x730))+(((-1.0)*pz*x728))+((x730*x731))), ((1.4)+(((-1.0)*pz*x730))+(((-1.0)*x728*x731))+(((-1.0)*x728*x729))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x732=IKsin(j2);
IkReal x733=IKcos(j2);
IkReal x734=((0.5)*cj1);
IkReal x735=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x733*x734))+pz+((x732*x735)));
evalcond[1]=((((0.7)*sj1))+(((-1.0)*x733*x735))+(((-1.0)*py*sj0))+((x732*x734))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x736=cj5*cj5;
IkReal x737=r21*r21;
IkReal x738=((r22*r22)+((x736*(r20*r20)))+(((-1.0)*x736*x737))+(((-2.0)*cj5*r20*r21*sj5))+x737);
j4eval[0]=x738;
j4eval[1]=IKsign(x738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x739=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x739;
j4eval[1]=IKsign(x739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x740=cj5*cj5;
IkReal x741=(r00*sj0);
IkReal x742=((1.0)*sj0);
IkReal x743=(r01*r21);
IkReal x744=(cj0*r10);
IkReal x745=(cj0*r11*r21);
IkReal x746=(cj5*r21*sj5);
IkReal x747=((1.0)*x740);
IkReal x748=(cj5*r20*sj5);
IkReal x749=((((-1.0)*r02*r22*x742))+(((-1.0)*x744*x746))+(((-1.0)*x745*x747))+((r01*sj0*x748))+(((-1.0)*x742*x743))+(((-1.0)*r20*x741*x747))+((x741*x746))+(((-1.0)*cj0*r11*x748))+((cj0*r12*r22))+((r20*x740*x744))+x745+((sj0*x740*x743)));
j4eval[0]=x749;
j4eval[1]=IKsign(x749);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x750=cj5*cj5;
IkReal x751=(sj1*sj2);
IkReal x752=(r01*sj0);
IkReal x753=(cj0*r10);
IkReal x754=((1.0)*sj5);
IkReal x755=(cj5*r21);
IkReal x756=(cj1*cj2);
IkReal x757=(cj0*r11);
IkReal x758=(cj5*r20);
IkReal x759=(cj0*r12);
IkReal x760=(r20*x750);
IkReal x761=((1.0)*r02*sj0);
IkReal x762=(r21*x750);
IkReal x763=((1.0)*r00*sj0);
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal((((cj5*x751*x753))+(((-1.0)*cj5*x751*x763))+(((-1.0)*cj5*x756*x763))+(((-1.0)*x751*x754*x757))+((cj5*x753*x756))+((sj5*x752*x756))+(((-1.0)*x754*x756*x757))+((sj5*x751*x752)))),IkReal((((x756*x759))+(((-1.0)*x756*x761))+(((-1.0)*x751*x761))+((x751*x759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
CheckValue<IkReal> x765=IKPowWithIntegerCheck(IKsign((((r22*x759))+((r21*x757))+((x752*x762))+(((-1.0)*r21*x752))+(((-1.0)*x754*x757*x758))+((sj5*x752*x758))+(((-1.0)*x757*x762))+(((-1.0)*x753*x754*x755))+(((-1.0)*x760*x763))+(((-1.0)*r22*x761))+((x753*x760))+((r00*sj0*sj5*x755)))),-1);
if(!x765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x764.value)+(((1.5707963267949)*(x765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x766=IKsin(j4);
IkReal x767=IKcos(j4);
IkReal x768=(cj5*r00);
IkReal x769=((1.0)*cj1);
IkReal x770=((1.0)*r01);
IkReal x771=((1.0)*sj1);
IkReal x772=(r11*sj5);
IkReal x773=(cj2*x769);
IkReal x774=(sj2*x771);
IkReal x775=(cj0*x766);
IkReal x776=(sj0*x767);
IkReal x777=(cj5*x766);
IkReal x778=((1.0)*x766);
IkReal x779=((1.0)*cj5*r10);
IkReal x780=(sj5*x767);
IkReal x781=(sj0*x766);
IkReal x782=(sj5*x781);
IkReal x783=((1.0)*cj0*x767);
IkReal x784=(x773+x774);
evalcond[0]=((((-1.0)*r21*sj5*x778))+(((-1.0)*x784))+((r20*x777))+((r22*x767)));
evalcond[1]=((((-1.0)*r21*x780))+((cj1*sj2))+((cj5*r20*x767))+(((-1.0)*r22*x778))+(((-1.0)*cj2*x771)));
evalcond[2]=((((-1.0)*x770*x782))+((x772*x775))+((x768*x781))+(((-1.0)*r12*x783))+(((-1.0)*x775*x779))+((r02*x776)));
evalcond[3]=((((-1.0)*r02*sj0*x778))+((r12*x775))+((cj0*x767*x772))+(((-1.0)*cj0*x767*x779))+(((-1.0)*sj5*x770*x776))+((x768*x776)));
evalcond[4]=((((-1.0)*x784))+((x772*x776))+((cj0*r01*x780))+(((-1.0)*x768*x783))+(((-1.0)*x776*x779))+((r12*x781))+((r02*x775)));
evalcond[5]=((((-1.0)*r12*x776))+((cj2*sj1))+((r01*sj5*x775))+(((-1.0)*r10*sj0*x777))+(((-1.0)*x768*x775))+((x772*x781))+(((-1.0)*r02*x783))+(((-1.0)*sj2*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x785=(cj1*cj2);
IkReal x786=(cj5*sj0);
IkReal x787=(sj1*sj2);
IkReal x788=(cj0*r12);
IkReal x789=(cj0*cj5);
IkReal x790=((1.0)*r10);
IkReal x791=(sj0*sj5);
IkReal x792=((1.0)*r01);
IkReal x793=(cj0*r11*sj5);
IkReal x794=((1.0)*r02*sj0);
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign((((r01*x789))+((r10*x791))+((cj0*r00*sj5))+((r11*x786)))),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal((((x785*x788))+((x787*x788))+(((-1.0)*x787*x794))+(((-1.0)*x785*x794)))),IkReal(((((-1.0)*x787*x791*x792))+((x785*x793))+(((-1.0)*x785*x789*x790))+((x787*x793))+((r00*x786*x787))+((r00*x785*x786))+(((-1.0)*x787*x789*x790))+(((-1.0)*x785*x791*x792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x795.value)))+(x796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x797=IKsin(j4);
IkReal x798=IKcos(j4);
IkReal x799=(cj5*r00);
IkReal x800=((1.0)*cj1);
IkReal x801=((1.0)*r01);
IkReal x802=((1.0)*sj1);
IkReal x803=(r11*sj5);
IkReal x804=(cj2*x800);
IkReal x805=(sj2*x802);
IkReal x806=(cj0*x797);
IkReal x807=(sj0*x798);
IkReal x808=(cj5*x797);
IkReal x809=((1.0)*x797);
IkReal x810=((1.0)*cj5*r10);
IkReal x811=(sj5*x798);
IkReal x812=(sj0*x797);
IkReal x813=(sj5*x812);
IkReal x814=((1.0)*cj0*x798);
IkReal x815=(x805+x804);
evalcond[0]=((((-1.0)*x815))+((r22*x798))+((r20*x808))+(((-1.0)*r21*sj5*x809)));
evalcond[1]=(((cj5*r20*x798))+((cj1*sj2))+(((-1.0)*r22*x809))+(((-1.0)*r21*x811))+(((-1.0)*cj2*x802)));
evalcond[2]=(((x799*x812))+(((-1.0)*x801*x813))+((x803*x806))+(((-1.0)*r12*x814))+((r02*x807))+(((-1.0)*x806*x810)));
evalcond[3]=((((-1.0)*cj0*x798*x810))+(((-1.0)*r02*sj0*x809))+((cj0*x798*x803))+((r12*x806))+(((-1.0)*sj5*x801*x807))+((x799*x807)));
evalcond[4]=(((cj0*r01*x811))+(((-1.0)*x815))+((x803*x807))+((r02*x806))+(((-1.0)*x807*x810))+(((-1.0)*x799*x814))+((r12*x812)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*sj2*x800))+(((-1.0)*r12*x807))+(((-1.0)*x799*x806))+((r01*sj5*x806))+(((-1.0)*r02*x814))+(((-1.0)*r10*sj0*x808))+((x803*x812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x816=cj5*cj5;
IkReal x817=r21*r21;
IkReal x818=(cj1*cj2);
IkReal x819=(sj1*sj2);
IkReal x820=(cj5*r20);
IkReal x821=(cj2*sj1);
IkReal x822=(r21*sj5);
IkReal x823=(cj1*sj2);
IkReal x824=((1.0)*x822);
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal(((((-1.0)*x818*x824))+(((-1.0)*x819*x824))+((x819*x820))+(((-1.0)*r22*x821))+((r22*x823))+((x818*x820)))),IkReal((((x820*x821))+(((-1.0)*x821*x824))+((x822*x823))+(((-1.0)*x820*x823))+((r22*x818))+((r22*x819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
CheckValue<IkReal> x826=IKPowWithIntegerCheck(IKsign(((((-2.0)*x820*x822))+(r22*r22)+(((-1.0)*x816*x817))+((x816*(r20*r20)))+x817)),-1);
if(!x826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x825.value)+(((1.5707963267949)*(x826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x827=IKsin(j4);
IkReal x828=IKcos(j4);
IkReal x829=(cj5*r00);
IkReal x830=((1.0)*cj1);
IkReal x831=((1.0)*r01);
IkReal x832=((1.0)*sj1);
IkReal x833=(r11*sj5);
IkReal x834=(cj2*x830);
IkReal x835=(sj2*x832);
IkReal x836=(cj0*x827);
IkReal x837=(sj0*x828);
IkReal x838=(cj5*x827);
IkReal x839=((1.0)*x827);
IkReal x840=((1.0)*cj5*r10);
IkReal x841=(sj5*x828);
IkReal x842=(sj0*x827);
IkReal x843=(sj5*x842);
IkReal x844=((1.0)*cj0*x828);
IkReal x845=(x834+x835);
evalcond[0]=((((-1.0)*r21*sj5*x839))+((r20*x838))+(((-1.0)*x845))+((r22*x828)));
evalcond[1]=(((cj1*sj2))+((cj5*r20*x828))+(((-1.0)*r22*x839))+(((-1.0)*r21*x841))+(((-1.0)*cj2*x832)));
evalcond[2]=((((-1.0)*x831*x843))+(((-1.0)*x836*x840))+((r02*x837))+((x833*x836))+((x829*x842))+(((-1.0)*r12*x844)));
evalcond[3]=(((cj0*x828*x833))+((x829*x837))+(((-1.0)*sj5*x831*x837))+((r12*x836))+(((-1.0)*cj0*x828*x840))+(((-1.0)*r02*sj0*x839)));
evalcond[4]=(((r02*x836))+((x833*x837))+((cj0*r01*x841))+(((-1.0)*x837*x840))+(((-1.0)*x845))+((r12*x842))+(((-1.0)*x829*x844)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*sj0*x838))+(((-1.0)*r02*x844))+((x833*x842))+((r01*sj5*x836))+(((-1.0)*x829*x836))+(((-1.0)*r12*x837))+(((-1.0)*sj2*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x846=cj0*cj0;
IkReal x847=cj5*cj5;
IkReal x848=r01*r01;
IkReal x849=r11*r11;
IkReal x850=r00*r00;
IkReal x851=r02*r02;
IkReal x852=(cj0*sj3);
IkReal x853=(cj5*sj5);
IkReal x854=((2.0)*r11);
IkReal x855=(r00*sj0);
IkReal x856=(r02*sj0);
IkReal x857=((1.0)*x847);
IkReal x858=(cj0*r01*sj0);
IkReal x859=((2.0)*r00*r01);
IkReal x860=((2.0)*cj0*r10*sj0);
IkReal x861=(x846*x849);
IkReal x862=(x846*x848);
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x852))+((sj3*x856)))),IkReal((((cj5*r10*x852))+((r01*sj0*sj3*sj5))+(((-1.0)*r11*sj5*x852))+(((-1.0)*cj5*sj3*x855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864=IKPowWithIntegerCheck(IKsign((((x846*x853*x859))+(((-1.0)*x853*x859))+(((-2.0)*cj0*r10*x847*x855))+(((-2.0)*cj0*r12*x856))+((x847*x854*x858))+(((-1.0)*x862))+(((2.0)*r10*x853*x858))+(((-1.0)*r10*x846*x853*x854))+((x847*x850))+(((-1.0)*x848*x857))+((x847*x862))+((cj0*x853*x854*x855))+(((-1.0)*x846*x851))+x851+x861+x848+((x846*(r12*r12)))+(((-1.0)*x854*x858))+((x846*x847*(r10*r10)))+(((-1.0)*x846*x850*x857))+(((-1.0)*x857*x861)))),-1);
if(!x864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x863.value)+(((1.5707963267949)*(x864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x865=IKsin(j4);
IkReal x866=IKcos(j4);
IkReal x867=(cj5*r10);
IkReal x868=(r11*sj5);
IkReal x869=(cj5*r00);
IkReal x870=(cj0*x865);
IkReal x871=(sj0*x865);
IkReal x872=(sj0*x866);
IkReal x873=((1.0)*r01*sj5);
IkReal x874=((1.0)*cj0*x866);
evalcond[0]=((((-1.0)*r12*x874))+((x868*x870))+(((-1.0)*x871*x873))+(((-1.0)*x867*x870))+((r02*x872))+((x869*x871)));
evalcond[1]=((((-1.0)*x872*x873))+sj3+((r12*x870))+((cj0*x866*x868))+(((-1.0)*r02*x871))+((x869*x872))+(((-1.0)*x867*x874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x875=(sj3*sj4);
IkReal x876=(r20*sj5);
IkReal x877=(cj5*r20);
IkReal x878=(r21*sj1);
IkReal x879=((1.0)*cj1*r21);
IkReal x880=(cj4*r22*sj3);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*sj5*x875*x878))+((sj1*x880))+((sj1*x875*x877))+(((-1.0)*cj1*x876))+(((-1.0)*cj5*x879)))))+(IKabs((((cj1*x875*x877))+((sj1*x876))+((cj1*x880))+(((-1.0)*sj5*x875*x879))+((cj5*x878))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x881=(sj4*sj5);
IkReal x882=(cj1*r20);
IkReal x883=(cj5*sj4);
IkReal x884=(cj4*r22);
IkReal x885=(r20*sj1);
IkReal x886=(r21*sj1);
IkReal x887=((1.0)*cj1*r21);
if( IKabs((((sj1*x884))+(((-1.0)*x881*x886))+((x883*x885))+(((-1.0)*cj5*x887))+(((-1.0)*sj5*x882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x882*x883))+((sj5*x885))+(((-1.0)*x881*x887))+((cj5*x886))+((cj1*x884)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x884))+(((-1.0)*x881*x886))+((x883*x885))+(((-1.0)*cj5*x887))+(((-1.0)*sj5*x882))))+IKsqr((((x882*x883))+((sj5*x885))+(((-1.0)*x881*x887))+((cj5*x886))+((cj1*x884))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x884))+(((-1.0)*x881*x886))+((x883*x885))+(((-1.0)*cj5*x887))+(((-1.0)*sj5*x882))), (((x882*x883))+((sj5*x885))+(((-1.0)*x881*x887))+((cj5*x886))+((cj1*x884))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x888=IKsin(j2);
IkReal x889=IKcos(j2);
IkReal x890=(r10*sj0);
IkReal x891=(cj0*r00);
IkReal x892=((1.0)*sj5);
IkReal x893=(cj0*r01);
IkReal x894=((1.0)*cj0);
IkReal x895=((1.0)*sj0);
IkReal x896=(sj4*sj5);
IkReal x897=(r11*sj0);
IkReal x898=(sj1*x889);
IkReal x899=(cj1*x889);
IkReal x900=(cj1*x888);
IkReal x901=((1.0)*cj5*sj4);
IkReal x902=(sj1*x888);
IkReal x903=((1.0)*x900);
evalcond[0]=((((-1.0)*x903))+(((-1.0)*cj5*r21))+x898+(((-1.0)*r20*x892)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*x899))+(((-1.0)*x902))+(((-1.0)*r21*sj4*x892)));
evalcond[2]=(((sj5*x891))+((sj5*x890))+((cj5*x893))+((cj5*x897))+x899+x902);
evalcond[3]=((((0.162)*x900))+(((0.5)*x902))+(((-0.7)*cj1))+pz+(((-0.162)*x898))+(((0.5)*x899)));
evalcond[4]=((((0.7)*sj1))+(((-0.5)*x898))+(((0.5)*x900))+(((-1.0)*py*x895))+(((-0.162)*x902))+(((-1.0)*px*x894))+(((-0.162)*x899)));
evalcond[5]=((((-1.0)*x891*x901))+(((-1.0)*x890*x901))+((x896*x897))+(((-1.0)*x903))+((x893*x896))+(((-1.0)*cj4*r02*x894))+(((-1.0)*cj4*r12*x895))+x898);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x904=(cj1*sj4);
IkReal x905=((1.0)*r21);
IkReal x906=(cj5*r20);
IkReal x907=(sj1*sj5);
IkReal x908=(cj4*r22);
if( IKabs((((cj1*r20*sj5))+((cj1*cj5*r21))+((sj1*sj4*x906))+(((-1.0)*sj4*x905*x907))+((sj1*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x908))+(((-1.0)*r20*x907))+(((-1.0)*cj5*sj1*x905))+(((-1.0)*sj5*x904*x905))+((x904*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+((cj1*cj5*r21))+((sj1*sj4*x906))+(((-1.0)*sj4*x905*x907))+((sj1*x908))))+IKsqr((((cj1*x908))+(((-1.0)*r20*x907))+(((-1.0)*cj5*sj1*x905))+(((-1.0)*sj5*x904*x905))+((x904*x906))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+((cj1*cj5*r21))+((sj1*sj4*x906))+(((-1.0)*sj4*x905*x907))+((sj1*x908))), (((cj1*x908))+(((-1.0)*r20*x907))+(((-1.0)*cj5*sj1*x905))+(((-1.0)*sj5*x904*x905))+((x904*x906))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x909=IKsin(j2);
IkReal x910=IKcos(j2);
IkReal x911=(r10*sj0);
IkReal x912=(cj0*r00);
IkReal x913=((1.0)*sj5);
IkReal x914=(cj0*r01);
IkReal x915=((1.0)*cj0);
IkReal x916=((1.0)*sj0);
IkReal x917=(sj4*sj5);
IkReal x918=(r11*sj0);
IkReal x919=(cj1*x909);
IkReal x920=((1.0)*cj5*sj4);
IkReal x921=(cj1*x910);
IkReal x922=(sj1*x910);
IkReal x923=(sj1*x909);
IkReal x924=((1.0)*x923);
IkReal x925=((1.0)*x921);
IkReal x926=(x924+x925);
evalcond[0]=((((-1.0)*r20*x913))+(((-1.0)*x922))+(((-1.0)*cj5*r21))+x919);
evalcond[1]=((((-1.0)*x926))+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x913)));
evalcond[2]=((((-0.7)*cj1))+(((0.5)*x921))+(((0.5)*x923))+(((0.162)*x922))+pz+(((-0.162)*x919)));
evalcond[3]=((((-1.0)*x926))+((sj5*x912))+((sj5*x911))+((cj5*x914))+((cj5*x918)));
evalcond[4]=((((0.7)*sj1))+(((-1.0)*px*x915))+(((-1.0)*py*x916))+(((0.162)*x921))+(((0.162)*x923))+(((0.5)*x919))+(((-0.5)*x922)));
evalcond[5]=(((x917*x918))+(((-1.0)*x912*x920))+((x914*x917))+(((-1.0)*cj4*r02*x915))+(((-1.0)*x919))+x922+(((-1.0)*cj4*r12*x916))+(((-1.0)*x911*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x927=((2.0)*sj1);
IkReal x928=(cj0*px);
IkReal x929=((2.0)*cj1);
IkReal x930=(py*sj0);
if( IKabs((((x928*x929))+(((-1.0)*pz*x927))+((x929*x930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x927*x928))+(((-1.0)*x927*x930))+(((-1.0)*pz*x929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x928*x929))+(((-1.0)*pz*x927))+((x929*x930))))+IKsqr(((1.4)+(((-1.0)*x927*x928))+(((-1.0)*x927*x930))+(((-1.0)*pz*x929))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x928*x929))+(((-1.0)*pz*x927))+((x929*x930))), ((1.4)+(((-1.0)*x927*x928))+(((-1.0)*x927*x930))+(((-1.0)*pz*x929))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x931=IKsin(j2);
IkReal x932=IKcos(j2);
IkReal x933=(r10*sj0);
IkReal x934=(cj0*r00);
IkReal x935=((1.0)*cj4);
IkReal x936=(cj0*r02);
IkReal x937=(sj0*sj4);
IkReal x938=(r21*sj5);
IkReal x939=(r11*sj5);
IkReal x940=(cj5*r20);
IkReal x941=((1.0)*sj4);
IkReal x942=(sj1*x932);
IkReal x943=(cj1*x932);
IkReal x944=((0.5)*x931);
IkReal x945=(cj5*x941);
IkReal x946=(sj1*x931);
IkReal x947=(cj0*r01*sj5);
IkReal x948=((1.0)*cj1*x931);
evalcond[0]=((((0.5)*x943))+(((-0.7)*cj1))+((sj1*x944))+pz);
evalcond[1]=((((-0.5)*x942))+(((0.7)*sj1))+((cj1*x944))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x938*x941))+(((-1.0)*x946))+(((-1.0)*x943))+((sj4*x940)));
evalcond[3]=((((-1.0)*x935*x938))+(((-1.0)*x948))+(((-1.0)*r22*x941))+x942+((cj4*x940)));
evalcond[4]=((((-1.0)*cj5*x934*x935))+((sj4*x936))+((cj4*sj0*x939))+((r12*x937))+x943+x946+((cj4*x947))+(((-1.0)*cj5*x933*x935)));
evalcond[5]=((((-1.0)*x935*x936))+(((-1.0)*r12*sj0*x935))+(((-1.0)*x948))+((x937*x939))+(((-1.0)*x933*x945))+((sj4*x947))+x942+(((-1.0)*x934*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x949=((2.0)*sj1);
IkReal x950=(cj0*px);
IkReal x951=((2.0)*cj1);
IkReal x952=(py*sj0);
if( IKabs((((x951*x952))+(((-1.0)*pz*x949))+((x950*x951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*pz*x951))+(((-1.0)*x949*x950))+(((-1.0)*x949*x952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x951*x952))+(((-1.0)*pz*x949))+((x950*x951))))+IKsqr(((1.4)+(((-1.0)*pz*x951))+(((-1.0)*x949*x950))+(((-1.0)*x949*x952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x951*x952))+(((-1.0)*pz*x949))+((x950*x951))), ((1.4)+(((-1.0)*pz*x951))+(((-1.0)*x949*x950))+(((-1.0)*x949*x952))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x953=IKsin(j2);
IkReal x954=IKcos(j2);
IkReal x955=((0.5)*cj1);
IkReal x956=(r10*sj0);
IkReal x957=(cj0*r00);
IkReal x958=((1.0)*cj4);
IkReal x959=(cj0*r02);
IkReal x960=(sj0*sj4);
IkReal x961=(r21*sj5);
IkReal x962=(r11*sj5);
IkReal x963=(cj5*r20);
IkReal x964=((1.0)*sj4);
IkReal x965=(cj5*x964);
IkReal x966=((1.0)*x954);
IkReal x967=(cj1*x953);
IkReal x968=(sj1*x954);
IkReal x969=(sj1*x953);
IkReal x970=(cj0*r01*sj5);
IkReal x971=((1.0)*x969);
IkReal x972=(cj1*x966);
IkReal x973=(x971+x972);
evalcond[0]=((((-0.7)*cj1))+(((0.5)*x969))+pz+((x954*x955)));
evalcond[1]=((((0.7)*sj1))+(((-0.5)*x968))+(((-1.0)*py*sj0))+((x953*x955))+(((-1.0)*cj0*px)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x961*x964))+((sj4*x963))+(((-1.0)*x973)));
evalcond[3]=((((-1.0)*x958*x961))+(((-1.0)*sj1*x966))+(((-1.0)*r22*x964))+x967+((cj4*x963)));
evalcond[4]=(((cj4*x970))+((cj4*sj0*x962))+(((-1.0)*cj5*x957*x958))+((sj4*x959))+(((-1.0)*cj5*x956*x958))+((r12*x960))+(((-1.0)*x973)));
evalcond[5]=((((-1.0)*x967))+((x960*x962))+(((-1.0)*x956*x965))+((sj4*x970))+(((-1.0)*x958*x959))+(((-1.0)*x957*x965))+(((-1.0)*r12*sj0*x958))+x968);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x974=(cj1*cj4);
IkReal x975=(cj3*r22);
IkReal x976=(cj4*sj1);
IkReal x977=(cj5*r20);
IkReal x978=(sj1*sj4);
IkReal x979=(cj1*sj4);
IkReal x980=((1.0)*r21*sj5);
CheckValue<IkReal> x981=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x981.valid){
continue;
}
CheckValue<IkReal> x982 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x978*x980))+((x975*x976))+(((-1.0)*r22*x979))+(((-1.0)*x974*x980))+((x974*x977))+((cj3*x977*x978)))),IkReal(((((-1.0)*x976*x977))+(((-1.0)*cj3*x979*x980))+((r21*sj5*x976))+((r22*x978))+((x974*x975))+((cj3*x977*x979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x982.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x981.value)))+(x982.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x983=IKsin(j2);
IkReal x984=IKcos(j2);
IkReal x985=(r10*sj0);
IkReal x986=((0.5)*cj1);
IkReal x987=(sj1*sj3);
IkReal x988=(cj0*r00);
IkReal x989=((1.0)*sj5);
IkReal x990=((1.0)*cj4);
IkReal x991=(cj0*r01);
IkReal x992=(sj0*sj4);
IkReal x993=(cj1*sj3);
IkReal x994=(cj0*r02);
IkReal x995=(cj4*sj5);
IkReal x996=(r11*sj0);
IkReal x997=(cj5*r20);
IkReal x998=((1.0)*cj5*sj4);
IkReal x999=((0.162)*x983);
IkReal x1000=(cj1*x984);
IkReal x1001=((1.0)*x983);
IkReal x1002=(sj1*x984);
IkReal x1003=(sj1*x983);
evalcond[0]=((((-1.0)*r20*x989))+(((-1.0)*x1001*x993))+(((-1.0)*cj5*r21))+((x984*x987)));
evalcond[1]=(((sj4*x997))+(((-1.0)*x1000))+((cj4*r22))+(((-1.0)*r21*sj4*x989))+(((-1.0)*sj1*x1001)));
evalcond[2]=(((cj3*x1002))+(((-1.0)*cj1*cj3*x1001))+((cj4*x997))+(((-1.0)*cj4*r21*x989))+(((-1.0)*r22*sj4)));
evalcond[3]=(((x983*x987))+((cj5*x991))+((cj5*x996))+((sj5*x988))+((sj5*x985))+((x984*x993)));
evalcond[4]=(((x993*x999))+(((-0.162)*x984*x987))+(((-0.7)*cj1))+pz+((x984*x986))+(((0.5)*x1003)));
evalcond[5]=(((x983*x986))+(((0.7)*sj1))+(((-0.5)*x1002))+(((-0.162)*x984*x993))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+(((-1.0)*x987*x999)));
evalcond[6]=(((r12*x992))+((sj4*x994))+((cj3*x1003))+((cj3*x1000))+((x991*x995))+(((-1.0)*cj5*x985*x990))+((x995*x996))+(((-1.0)*cj5*x988*x990)));
evalcond[7]=((((-1.0)*r12*sj0*x990))+x1002+(((-1.0)*x985*x998))+(((-1.0)*x990*x994))+(((-1.0)*cj1*x1001))+((sj4*sj5*x991))+((r11*sj5*x992))+(((-1.0)*x988*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1004=((0.162)*sj3);
IkReal x1005=(r20*sj5);
IkReal x1006=((0.7)*sj3);
IkReal x1007=(cj1*cj5*r21);
IkReal x1008=((1.0)*pz*sj3);
IkReal x1009=(cj5*r21*sj1);
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1010.valid){
continue;
}
CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal((((cj1*sj1*x1006))+(((-0.5)*x1007))+((sj1*x1004*x1005))+((x1004*x1009))+(((-1.0)*sj1*x1008))+(((-0.5)*cj1*x1005)))),IkReal((((cj1*x1004*x1005))+((x1006*(cj1*cj1)))+((x1004*x1007))+(((-1.0)*cj1*x1008))+(((0.5)*sj1*x1005))+(((0.5)*x1009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1011.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1010.value)))+(x1011.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1012=IKsin(j2);
IkReal x1013=IKcos(j2);
IkReal x1014=(r10*sj0);
IkReal x1015=((0.5)*cj1);
IkReal x1016=(sj1*sj3);
IkReal x1017=(cj0*r00);
IkReal x1018=((1.0)*sj5);
IkReal x1019=((1.0)*cj4);
IkReal x1020=(cj0*r01);
IkReal x1021=(sj0*sj4);
IkReal x1022=(cj1*sj3);
IkReal x1023=(cj0*r02);
IkReal x1024=(cj4*sj5);
IkReal x1025=(r11*sj0);
IkReal x1026=(cj5*r20);
IkReal x1027=((1.0)*cj5*sj4);
IkReal x1028=((0.162)*x1012);
IkReal x1029=(cj1*x1013);
IkReal x1030=((1.0)*x1012);
IkReal x1031=(sj1*x1013);
IkReal x1032=(sj1*x1012);
evalcond[0]=((((-1.0)*r20*x1018))+(((-1.0)*x1022*x1030))+((x1013*x1016))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x1029))+((sj4*x1026))+(((-1.0)*sj1*x1030))+(((-1.0)*r21*sj4*x1018)));
evalcond[2]=(((cj3*x1031))+(((-1.0)*cj1*cj3*x1030))+((cj4*x1026))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x1018)));
evalcond[3]=(((cj5*x1020))+((cj5*x1025))+((sj5*x1014))+((sj5*x1017))+((x1012*x1016))+((x1013*x1022)));
evalcond[4]=((((-0.162)*x1013*x1016))+(((-0.7)*cj1))+((x1013*x1015))+((x1022*x1028))+pz+(((0.5)*x1032)));
evalcond[5]=((((0.7)*sj1))+(((-0.5)*x1031))+(((-0.162)*x1013*x1022))+((x1012*x1015))+(((-1.0)*py*sj0))+(((-1.0)*x1016*x1028))+(((-1.0)*cj0*px)));
evalcond[6]=(((cj3*x1032))+((sj4*x1023))+((r12*x1021))+(((-1.0)*cj5*x1017*x1019))+((x1020*x1024))+(((-1.0)*cj5*x1014*x1019))+((x1024*x1025))+((cj3*x1029)));
evalcond[7]=(x1031+((sj4*sj5*x1020))+((r11*sj5*x1021))+(((-1.0)*x1019*x1023))+(((-1.0)*r12*sj0*x1019))+(((-1.0)*x1014*x1027))+(((-1.0)*cj1*x1030))+(((-1.0)*x1017*x1027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1033=(sj3*sj4);
IkReal x1034=(r20*sj5);
IkReal x1035=(cj5*r20);
IkReal x1036=(r21*sj1);
IkReal x1037=((1.0)*cj1*r21);
IkReal x1038=(cj4*r22*sj3);
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1037))+((sj1*x1038))+(((-1.0)*cj1*x1034))+((sj1*x1033*x1035))+(((-1.0)*sj5*x1033*x1036)))),IkReal((((sj1*x1034))+((cj5*x1036))+(((-1.0)*sj5*x1033*x1037))+((cj1*x1038))+((cj1*x1033*x1035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1040.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1039.value)+(((1.5707963267949)*(x1040.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1041=IKsin(j2);
IkReal x1042=IKcos(j2);
IkReal x1043=(r10*sj0);
IkReal x1044=((0.5)*cj1);
IkReal x1045=(sj1*sj3);
IkReal x1046=(cj0*r00);
IkReal x1047=((1.0)*sj5);
IkReal x1048=((1.0)*cj4);
IkReal x1049=(cj0*r01);
IkReal x1050=(sj0*sj4);
IkReal x1051=(cj1*sj3);
IkReal x1052=(cj0*r02);
IkReal x1053=(cj4*sj5);
IkReal x1054=(r11*sj0);
IkReal x1055=(cj5*r20);
IkReal x1056=((1.0)*cj5*sj4);
IkReal x1057=((0.162)*x1041);
IkReal x1058=(cj1*x1042);
IkReal x1059=((1.0)*x1041);
IkReal x1060=(sj1*x1042);
IkReal x1061=(sj1*x1041);
evalcond[0]=(((x1042*x1045))+(((-1.0)*cj5*r21))+(((-1.0)*r20*x1047))+(((-1.0)*x1051*x1059)));
evalcond[1]=((((-1.0)*r21*sj4*x1047))+((cj4*r22))+(((-1.0)*sj1*x1059))+(((-1.0)*x1058))+((sj4*x1055)));
evalcond[2]=(((cj3*x1060))+(((-1.0)*cj4*r21*x1047))+(((-1.0)*cj1*cj3*x1059))+(((-1.0)*r22*sj4))+((cj4*x1055)));
evalcond[3]=(((sj5*x1043))+((sj5*x1046))+((x1042*x1051))+((x1041*x1045))+((cj5*x1054))+((cj5*x1049)));
evalcond[4]=((((0.5)*x1061))+((x1042*x1044))+(((-0.7)*cj1))+(((-0.162)*x1042*x1045))+((x1051*x1057))+pz);
evalcond[5]=((((0.7)*sj1))+(((-1.0)*x1045*x1057))+((x1041*x1044))+(((-0.5)*x1060))+(((-0.162)*x1042*x1051))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[6]=(((r12*x1050))+(((-1.0)*cj5*x1043*x1048))+((x1053*x1054))+((cj3*x1061))+((cj3*x1058))+(((-1.0)*cj5*x1046*x1048))+((x1049*x1053))+((sj4*x1052)));
evalcond[7]=((((-1.0)*x1046*x1056))+x1060+(((-1.0)*cj1*x1059))+(((-1.0)*x1043*x1056))+(((-1.0)*x1048*x1052))+(((-1.0)*r12*sj0*x1048))+((r11*sj5*x1050))+((sj4*sj5*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1062=((0.162)*sj3);
IkReal x1063=((0.7)*sj3);
IkReal x1064=(r20*sj5);
IkReal x1065=(cj1*cj5*r21);
IkReal x1066=(cj0*px*sj3);
IkReal x1067=(cj5*r21*sj1);
IkReal x1068=(py*sj0*sj3);
CheckValue<IkReal> x1069=IKPowWithIntegerCheck(IKsign(((-0.162)+(((0.162)*(cj3*cj3))))),-1);
if(!x1069.valid){
continue;
}
CheckValue<IkReal> x1070 = IKatan2WithCheck(IkReal(((((0.5)*x1067))+((cj1*x1062*x1064))+(((0.5)*sj1*x1064))+((x1063*(cj1*cj1)))+((x1062*x1065))+((sj1*x1066))+((sj1*x1068))+(((-1.0)*x1063)))),IkReal(((((0.5)*x1065))+(((-1.0)*cj1*sj1*x1063))+(((-1.0)*x1062*x1067))+(((-1.0)*sj1*x1062*x1064))+((cj1*x1068))+((cj1*x1066))+(((0.5)*cj1*x1064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1070.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1069.value)))+(x1070.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1071=IKcos(j2);
IkReal x1072=IKsin(j2);
IkReal x1073=((0.5)*cj1);
IkReal x1074=(cj1*sj3);
IkReal x1075=(sj1*x1071);
IkReal x1076=(sj1*sj3*x1072);
evalcond[0]=(((sj3*x1075))+(((-1.0)*cj5*r21))+(((-1.0)*x1072*x1074))+(((-1.0)*r20*sj5)));
evalcond[1]=(x1076+((cj0*cj5*r01))+((cj5*r11*sj0))+((x1071*x1074))+((cj0*r00*sj5))+((r10*sj0*sj5)));
evalcond[2]=((((-0.7)*cj1))+((x1071*x1073))+(((0.162)*x1072*x1074))+(((0.5)*sj1*x1072))+pz+(((-0.162)*sj3*x1075)));
evalcond[3]=((((0.7)*sj1))+(((-0.162)*x1076))+(((-0.5)*x1075))+(((-0.162)*x1071*x1074))+(((-1.0)*py*sj0))+((x1072*x1073))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1077=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1077;
j4eval[1]=IKsign(x1077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1078=cj5*cj5;
IkReal x1079=r21*r21;
IkReal x1080=(x1079+(r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1078*x1079))+((x1078*(r20*r20))));
j4eval[0]=x1080;
j4eval[1]=IKsign(x1080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1081=cj5*cj5;
IkReal x1082=(cj0*r11);
IkReal x1083=((1.0)*sj0);
IkReal x1084=(cj0*r10);
IkReal x1085=(cj5*r20*sj5);
IkReal x1086=(r21*x1081);
IkReal x1087=(cj5*r21*sj5);
IkReal x1088=(r20*x1081);
IkReal x1089=(((x1082*x1086))+((x1082*x1085))+(((-1.0)*r00*x1083*x1087))+(((-1.0)*r21*x1082))+((r00*sj0*x1088))+((r01*r21*sj0))+(((-1.0)*cj0*r12*r22))+(((-1.0)*x1084*x1088))+((r02*r22*sj0))+((x1084*x1087))+(((-1.0)*r01*x1083*x1086))+(((-1.0)*r01*x1083*x1085)));
j4eval[0]=x1089;
j4eval[1]=IKsign(x1089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1090=cj5*cj5;
IkReal x1091=((1.0)*sj5);
IkReal x1092=(cj5*r10);
IkReal x1093=(cj0*r11);
IkReal x1094=(r02*sj0);
IkReal x1095=((1.0)*cj0);
IkReal x1096=(r01*sj0);
IkReal x1097=((1.0)*x1096);
IkReal x1098=(r21*x1090);
IkReal x1099=(cj5*r20*sj5);
IkReal x1100=(cj5*r00*sj0);
IkReal x1101=(cj2*cj3*sj1);
IkReal x1102=(cj1*cj3*sj2);
IkReal x1103=(r20*x1090);
IkReal x1104=(cj0*x1101);
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal((((x1094*x1101))+(((-1.0)*r12*x1095*x1101))+(((-1.0)*x1094*x1102))+((cj0*r12*x1102)))),IkReal((((x1092*x1104))+((sj5*x1093*x1102))+((sj5*x1096*x1101))+(((-1.0)*x1100*x1101))+(((-1.0)*x1091*x1096*x1102))+(((-1.0)*x1091*x1093*x1101))+((x1100*x1102))+(((-1.0)*x1092*x1095*x1102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
CheckValue<IkReal> x1106=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1097*x1098))+(((-1.0)*r12*r22*x1095))+((r21*x1096))+((r22*x1094))+((cj0*r21*sj5*x1092))+((r00*sj0*x1103))+(((-1.0)*r21*x1091*x1100))+((x1093*x1098))+((x1093*x1099))+(((-1.0)*r10*x1095*x1103))+(((-1.0)*cj5*r20*x1091*x1096))+(((-1.0)*r21*x1093)))),-1);
if(!x1106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1105.value)+(((1.5707963267949)*(x1106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1107=IKsin(j4);
IkReal x1108=IKcos(j4);
IkReal x1109=((1.0)*cj5);
IkReal x1110=(cj1*cj2);
IkReal x1111=((1.0)*r01);
IkReal x1112=(cj3*sj1);
IkReal x1113=((1.0)*sj2);
IkReal x1114=(r02*sj0);
IkReal x1115=(r11*sj5);
IkReal x1116=(r21*sj5);
IkReal x1117=(r01*sj5);
IkReal x1118=(cj0*x1107);
IkReal x1119=(cj5*x1107);
IkReal x1120=((1.0)*x1107);
IkReal x1121=(sj0*x1108);
IkReal x1122=(cj0*x1108);
IkReal x1123=(sj0*sj5*x1107);
IkReal x1124=((1.0)*x1122);
evalcond[0]=(((r20*x1119))+(((-1.0)*x1116*x1120))+(((-1.0)*sj1*x1113))+(((-1.0)*x1110))+((r22*x1108)));
evalcond[1]=((((-1.0)*cj1*cj3*x1113))+(((-1.0)*r22*x1120))+((cj2*x1112))+((cj5*r20*x1108))+(((-1.0)*x1108*x1116)));
evalcond[2]=((((-1.0)*r12*x1124))+((x1108*x1114))+(((-1.0)*r10*x1109*x1118))+((r00*sj0*x1119))+(((-1.0)*x1111*x1123))+((x1115*x1118)));
evalcond[3]=((((-1.0)*x1114*x1120))+sj3+(((-1.0)*r10*x1109*x1122))+(((-1.0)*sj5*x1111*x1121))+((r12*x1118))+((cj5*r00*x1121))+((x1115*x1122)));
evalcond[4]=(((sj2*x1112))+(((-1.0)*r00*x1109*x1122))+(((-1.0)*r10*x1109*x1121))+((x1117*x1122))+((r12*sj0*x1107))+((cj3*x1110))+((r02*x1118))+((x1115*x1121)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*x1113))+(((-1.0)*r10*sj0*x1107*x1109))+((x1117*x1118))+(((-1.0)*r02*x1124))+((sj0*x1107*x1115))+(((-1.0)*r12*x1121))+(((-1.0)*r00*x1109*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1125=cj5*cj5;
IkReal x1126=r21*r21;
IkReal x1127=((1.0)*cj3);
IkReal x1128=(r22*sj2);
IkReal x1129=(sj1*sj2);
IkReal x1130=(cj1*cj2);
IkReal x1131=(r21*sj5);
IkReal x1132=(cj5*r20);
IkReal x1133=(cj1*sj2);
IkReal x1134=(cj2*x1132);
IkReal x1135=((1.0)*x1131);
IkReal x1136=(cj2*cj3*sj1);
CheckValue<IkReal> x1137 = IKatan2WithCheck(IkReal((((x1130*x1132))+(((-1.0)*cj1*x1127*x1128))+((x1129*x1132))+(((-1.0)*x1130*x1135))+((r22*x1136))+(((-1.0)*x1129*x1135)))),IkReal((((x1131*x1136))+((sj1*x1128))+((r22*x1130))+(((-1.0)*sj1*x1127*x1134))+((cj3*x1132*x1133))+(((-1.0)*x1127*x1131*x1133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1137.valid){
continue;
}
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(IKsign((x1126+(((-1.0)*x1125*x1126))+(r22*r22)+(((-2.0)*x1131*x1132))+((x1125*(r20*r20))))),-1);
if(!x1138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1137.value)+(((1.5707963267949)*(x1138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1139=IKsin(j4);
IkReal x1140=IKcos(j4);
IkReal x1141=((1.0)*cj5);
IkReal x1142=(cj1*cj2);
IkReal x1143=((1.0)*r01);
IkReal x1144=(cj3*sj1);
IkReal x1145=((1.0)*sj2);
IkReal x1146=(r02*sj0);
IkReal x1147=(r11*sj5);
IkReal x1148=(r21*sj5);
IkReal x1149=(r01*sj5);
IkReal x1150=(cj0*x1139);
IkReal x1151=(cj5*x1139);
IkReal x1152=((1.0)*x1139);
IkReal x1153=(sj0*x1140);
IkReal x1154=(cj0*x1140);
IkReal x1155=(sj0*sj5*x1139);
IkReal x1156=((1.0)*x1154);
evalcond[0]=(((r22*x1140))+(((-1.0)*x1142))+((r20*x1151))+(((-1.0)*x1148*x1152))+(((-1.0)*sj1*x1145)));
evalcond[1]=(((cj5*r20*x1140))+(((-1.0)*cj1*cj3*x1145))+((cj2*x1144))+(((-1.0)*r22*x1152))+(((-1.0)*x1140*x1148)));
evalcond[2]=(((x1140*x1146))+(((-1.0)*x1143*x1155))+((x1147*x1150))+(((-1.0)*r10*x1141*x1150))+(((-1.0)*r12*x1156))+((r00*sj0*x1151)));
evalcond[3]=(sj3+((r12*x1150))+((cj5*r00*x1153))+((x1147*x1154))+(((-1.0)*x1146*x1152))+(((-1.0)*r10*x1141*x1154))+(((-1.0)*sj5*x1143*x1153)));
evalcond[4]=(((x1149*x1154))+(((-1.0)*r00*x1141*x1154))+((r12*sj0*x1139))+((cj3*x1142))+((r02*x1150))+((sj2*x1144))+((x1147*x1153))+(((-1.0)*r10*x1141*x1153)));
evalcond[5]=(((cj2*sj1))+((x1149*x1150))+(((-1.0)*cj1*x1145))+(((-1.0)*r10*sj0*x1139*x1141))+(((-1.0)*r00*x1141*x1150))+(((-1.0)*r12*x1153))+(((-1.0)*r02*x1156))+((sj0*x1139*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1157=(cj1*cj2);
IkReal x1158=(cj5*sj0);
IkReal x1159=(sj1*sj2);
IkReal x1160=(cj0*r12);
IkReal x1161=(cj0*cj5);
IkReal x1162=((1.0)*r10);
IkReal x1163=(sj0*sj5);
IkReal x1164=((1.0)*r01);
IkReal x1165=(cj0*r11*sj5);
IkReal x1166=((1.0)*r02*sj0);
CheckValue<IkReal> x1167=IKPowWithIntegerCheck(IKsign((((r11*x1158))+((r10*x1163))+((r01*x1161))+((cj0*r00*sj5)))),-1);
if(!x1167.valid){
continue;
}
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal((((x1159*x1160))+(((-1.0)*x1159*x1166))+((x1157*x1160))+(((-1.0)*x1157*x1166)))),IkReal((((x1159*x1165))+(((-1.0)*x1157*x1161*x1162))+(((-1.0)*x1157*x1163*x1164))+(((-1.0)*x1159*x1161*x1162))+((x1157*x1165))+((r00*x1158*x1159))+(((-1.0)*x1159*x1163*x1164))+((r00*x1157*x1158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1167.value)))+(x1168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1169=IKsin(j4);
IkReal x1170=IKcos(j4);
IkReal x1171=((1.0)*cj5);
IkReal x1172=(cj1*cj2);
IkReal x1173=((1.0)*r01);
IkReal x1174=(cj3*sj1);
IkReal x1175=((1.0)*sj2);
IkReal x1176=(r02*sj0);
IkReal x1177=(r11*sj5);
IkReal x1178=(r21*sj5);
IkReal x1179=(r01*sj5);
IkReal x1180=(cj0*x1169);
IkReal x1181=(cj5*x1169);
IkReal x1182=((1.0)*x1169);
IkReal x1183=(sj0*x1170);
IkReal x1184=(cj0*x1170);
IkReal x1185=(sj0*sj5*x1169);
IkReal x1186=((1.0)*x1184);
evalcond[0]=((((-1.0)*sj1*x1175))+(((-1.0)*x1178*x1182))+((r22*x1170))+((r20*x1181))+(((-1.0)*x1172)));
evalcond[1]=((((-1.0)*x1170*x1178))+(((-1.0)*r22*x1182))+((cj5*r20*x1170))+(((-1.0)*cj1*cj3*x1175))+((cj2*x1174)));
evalcond[2]=((((-1.0)*r10*x1171*x1180))+((r00*sj0*x1181))+((x1177*x1180))+(((-1.0)*x1173*x1185))+((x1170*x1176))+(((-1.0)*r12*x1186)));
evalcond[3]=((((-1.0)*sj5*x1173*x1183))+(((-1.0)*x1176*x1182))+sj3+(((-1.0)*r10*x1171*x1184))+((x1177*x1184))+((cj5*r00*x1183))+((r12*x1180)));
evalcond[4]=(((r12*sj0*x1169))+(((-1.0)*r10*x1171*x1183))+((x1179*x1184))+((x1177*x1183))+(((-1.0)*r00*x1171*x1184))+((r02*x1180))+((cj3*x1172))+((sj2*x1174)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x1183))+((x1179*x1180))+(((-1.0)*r10*sj0*x1169*x1171))+(((-1.0)*r00*x1171*x1180))+(((-1.0)*cj1*x1175))+((sj0*x1169*x1177))+(((-1.0)*r02*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1187=((0.162)*sj3);
IkReal x1188=(r20*sj5);
IkReal x1189=((0.7)*sj3);
IkReal x1190=(cj1*cj5*r21);
IkReal x1191=((1.0)*pz*sj3);
IkReal x1192=(cj5*r21*sj1);
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1193.valid){
continue;
}
CheckValue<IkReal> x1194 = IKatan2WithCheck(IkReal((((x1187*x1192))+(((-0.5)*x1190))+((sj1*x1187*x1188))+(((-0.5)*cj1*x1188))+((cj1*sj1*x1189))+(((-1.0)*sj1*x1191)))),IkReal((((x1187*x1190))+(((0.5)*sj1*x1188))+((cj1*x1187*x1188))+((x1189*(cj1*cj1)))+(((-1.0)*cj1*x1191))+(((0.5)*x1192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1194.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1193.value)))+(x1194.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1195=IKcos(j2);
IkReal x1196=IKsin(j2);
IkReal x1197=((0.5)*cj1);
IkReal x1198=(cj1*sj3);
IkReal x1199=(sj1*x1195);
IkReal x1200=(sj1*sj3*x1196);
evalcond[0]=(((sj3*x1199))+(((-1.0)*cj5*r21))+(((-1.0)*x1196*x1198))+(((-1.0)*r20*sj5)));
evalcond[1]=(x1200+((cj0*cj5*r01))+((cj5*r11*sj0))+((x1195*x1198))+((cj0*r00*sj5))+((r10*sj0*sj5)));
evalcond[2]=((((-0.7)*cj1))+(((0.5)*sj1*x1196))+((x1195*x1197))+pz+(((-0.162)*sj3*x1199))+(((0.162)*x1196*x1198)));
evalcond[3]=((((0.7)*sj1))+(((-0.162)*x1195*x1198))+(((-0.5)*x1199))+((x1196*x1197))+(((-0.162)*x1200))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1201=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1201;
j4eval[1]=IKsign(x1201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1202=cj5*cj5;
IkReal x1203=r21*r21;
IkReal x1204=(x1203+(r22*r22)+((x1202*(r20*r20)))+(((-1.0)*x1202*x1203))+(((-2.0)*cj5*r20*r21*sj5)));
j4eval[0]=x1204;
j4eval[1]=IKsign(x1204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1205=cj5*cj5;
IkReal x1206=(cj0*r11);
IkReal x1207=((1.0)*sj0);
IkReal x1208=(cj0*r10);
IkReal x1209=(cj5*r20*sj5);
IkReal x1210=(r21*x1205);
IkReal x1211=(cj5*r21*sj5);
IkReal x1212=(r20*x1205);
IkReal x1213=((((-1.0)*r01*x1207*x1210))+(((-1.0)*r21*x1206))+(((-1.0)*r01*x1207*x1209))+((x1206*x1210))+((r01*r21*sj0))+(((-1.0)*cj0*r12*r22))+(((-1.0)*r00*x1207*x1211))+((r00*sj0*x1212))+((x1208*x1211))+((x1206*x1209))+(((-1.0)*x1208*x1212))+((r02*r22*sj0)));
j4eval[0]=x1213;
j4eval[1]=IKsign(x1213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1214=cj5*cj5;
IkReal x1215=((1.0)*sj5);
IkReal x1216=(cj5*r10);
IkReal x1217=(cj0*r11);
IkReal x1218=(r02*sj0);
IkReal x1219=((1.0)*cj0);
IkReal x1220=(r01*sj0);
IkReal x1221=((1.0)*x1220);
IkReal x1222=(r21*x1214);
IkReal x1223=(cj5*r20*sj5);
IkReal x1224=(cj5*r00*sj0);
IkReal x1225=(cj2*cj3*sj1);
IkReal x1226=(cj1*cj3*sj2);
IkReal x1227=(r20*x1214);
IkReal x1228=(cj0*x1225);
CheckValue<IkReal> x1229 = IKatan2WithCheck(IkReal(((((-1.0)*x1218*x1226))+((cj0*r12*x1226))+(((-1.0)*r12*x1219*x1225))+((x1218*x1225)))),IkReal(((((-1.0)*x1216*x1219*x1226))+((sj5*x1220*x1225))+(((-1.0)*x1215*x1217*x1225))+((x1216*x1228))+((x1224*x1226))+((sj5*x1217*x1226))+(((-1.0)*x1215*x1220*x1226))+(((-1.0)*x1224*x1225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1229.valid){
continue;
}
CheckValue<IkReal> x1230=IKPowWithIntegerCheck(IKsign((((cj0*r21*sj5*x1216))+((r22*x1218))+((x1217*x1223))+((x1217*x1222))+(((-1.0)*r12*r22*x1219))+(((-1.0)*x1221*x1222))+((r00*sj0*x1227))+(((-1.0)*r10*x1219*x1227))+(((-1.0)*r21*x1215*x1224))+(((-1.0)*cj5*r20*x1215*x1220))+(((-1.0)*r21*x1217))+((r21*x1220)))),-1);
if(!x1230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1229.value)+(((1.5707963267949)*(x1230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1231=IKsin(j4);
IkReal x1232=IKcos(j4);
IkReal x1233=((1.0)*cj5);
IkReal x1234=(cj1*cj2);
IkReal x1235=((1.0)*r01);
IkReal x1236=(cj3*sj1);
IkReal x1237=((1.0)*sj2);
IkReal x1238=(r02*sj0);
IkReal x1239=(r11*sj5);
IkReal x1240=(r21*sj5);
IkReal x1241=(r01*sj5);
IkReal x1242=(cj0*x1231);
IkReal x1243=(cj5*x1231);
IkReal x1244=((1.0)*x1231);
IkReal x1245=(sj0*x1232);
IkReal x1246=(cj0*x1232);
IkReal x1247=(sj0*sj5*x1231);
IkReal x1248=((1.0)*x1246);
evalcond[0]=((((-1.0)*x1234))+((r20*x1243))+((r22*x1232))+(((-1.0)*x1240*x1244))+(((-1.0)*sj1*x1237)));
evalcond[1]=((((-1.0)*cj1*cj3*x1237))+((cj2*x1236))+(((-1.0)*r22*x1244))+((cj5*r20*x1232))+(((-1.0)*x1232*x1240)));
evalcond[2]=(((x1239*x1242))+(((-1.0)*r10*x1233*x1242))+(((-1.0)*x1235*x1247))+(((-1.0)*r12*x1248))+((r00*sj0*x1243))+((x1232*x1238)));
evalcond[3]=(sj3+((x1239*x1246))+((cj5*r00*x1245))+(((-1.0)*r10*x1233*x1246))+(((-1.0)*x1238*x1244))+(((-1.0)*sj5*x1235*x1245))+((r12*x1242)));
evalcond[4]=(((cj3*x1234))+((x1239*x1245))+((sj2*x1236))+(((-1.0)*r10*x1233*x1245))+(((-1.0)*r00*x1233*x1246))+((r02*x1242))+((x1241*x1246))+((r12*sj0*x1231)));
evalcond[5]=((((-1.0)*r02*x1248))+((cj2*sj1))+((sj0*x1231*x1239))+(((-1.0)*r12*x1245))+(((-1.0)*r10*sj0*x1231*x1233))+(((-1.0)*r00*x1233*x1242))+((x1241*x1242))+(((-1.0)*cj1*x1237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1249=cj5*cj5;
IkReal x1250=r21*r21;
IkReal x1251=((1.0)*cj3);
IkReal x1252=(r22*sj2);
IkReal x1253=(sj1*sj2);
IkReal x1254=(cj1*cj2);
IkReal x1255=(r21*sj5);
IkReal x1256=(cj5*r20);
IkReal x1257=(cj1*sj2);
IkReal x1258=(cj2*x1256);
IkReal x1259=((1.0)*x1255);
IkReal x1260=(cj2*cj3*sj1);
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(IKsign((x1250+((x1249*(r20*r20)))+(r22*r22)+(((-1.0)*x1249*x1250))+(((-2.0)*x1255*x1256)))),-1);
if(!x1261.valid){
continue;
}
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x1251*x1252))+(((-1.0)*x1253*x1259))+((r22*x1260))+((x1253*x1256))+(((-1.0)*x1254*x1259))+((x1254*x1256)))),IkReal(((((-1.0)*sj1*x1251*x1258))+((r22*x1254))+((sj1*x1252))+((x1255*x1260))+(((-1.0)*x1251*x1255*x1257))+((cj3*x1256*x1257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1261.value)))+(x1262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1263=IKsin(j4);
IkReal x1264=IKcos(j4);
IkReal x1265=((1.0)*cj5);
IkReal x1266=(cj1*cj2);
IkReal x1267=((1.0)*r01);
IkReal x1268=(cj3*sj1);
IkReal x1269=((1.0)*sj2);
IkReal x1270=(r02*sj0);
IkReal x1271=(r11*sj5);
IkReal x1272=(r21*sj5);
IkReal x1273=(r01*sj5);
IkReal x1274=(cj0*x1263);
IkReal x1275=(cj5*x1263);
IkReal x1276=((1.0)*x1263);
IkReal x1277=(sj0*x1264);
IkReal x1278=(cj0*x1264);
IkReal x1279=(sj0*sj5*x1263);
IkReal x1280=((1.0)*x1278);
evalcond[0]=(((r22*x1264))+(((-1.0)*x1272*x1276))+(((-1.0)*sj1*x1269))+(((-1.0)*x1266))+((r20*x1275)));
evalcond[1]=((((-1.0)*x1264*x1272))+(((-1.0)*r22*x1276))+((cj5*r20*x1264))+((cj2*x1268))+(((-1.0)*cj1*cj3*x1269)));
evalcond[2]=(((r00*sj0*x1275))+((x1264*x1270))+(((-1.0)*x1267*x1279))+(((-1.0)*r10*x1265*x1274))+((x1271*x1274))+(((-1.0)*r12*x1280)));
evalcond[3]=(((r12*x1274))+sj3+(((-1.0)*x1270*x1276))+(((-1.0)*r10*x1265*x1278))+((cj5*r00*x1277))+((x1271*x1278))+(((-1.0)*sj5*x1267*x1277)));
evalcond[4]=(((r12*sj0*x1263))+((cj3*x1266))+((x1273*x1278))+((r02*x1274))+(((-1.0)*r00*x1265*x1278))+(((-1.0)*r10*x1265*x1277))+((x1271*x1277))+((sj2*x1268)));
evalcond[5]=((((-1.0)*r02*x1280))+((cj2*sj1))+((x1273*x1274))+(((-1.0)*r00*x1265*x1274))+(((-1.0)*cj1*x1269))+(((-1.0)*r12*x1277))+((sj0*x1263*x1271))+(((-1.0)*r10*sj0*x1263*x1265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1281=(cj1*cj2);
IkReal x1282=(cj5*sj0);
IkReal x1283=(sj1*sj2);
IkReal x1284=(cj0*r12);
IkReal x1285=(cj0*cj5);
IkReal x1286=((1.0)*r10);
IkReal x1287=(sj0*sj5);
IkReal x1288=((1.0)*r01);
IkReal x1289=(cj0*r11*sj5);
IkReal x1290=((1.0)*r02*sj0);
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(IKsign((((r11*x1282))+((r10*x1287))+((r01*x1285))+((cj0*r00*sj5)))),-1);
if(!x1291.valid){
continue;
}
CheckValue<IkReal> x1292 = IKatan2WithCheck(IkReal(((((-1.0)*x1283*x1290))+(((-1.0)*x1281*x1290))+((x1283*x1284))+((x1281*x1284)))),IkReal((((r00*x1281*x1282))+(((-1.0)*x1283*x1285*x1286))+((r00*x1282*x1283))+((x1283*x1289))+(((-1.0)*x1281*x1285*x1286))+(((-1.0)*x1283*x1287*x1288))+(((-1.0)*x1281*x1287*x1288))+((x1281*x1289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1291.value)))+(x1292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1293=IKsin(j4);
IkReal x1294=IKcos(j4);
IkReal x1295=((1.0)*cj5);
IkReal x1296=(cj1*cj2);
IkReal x1297=((1.0)*r01);
IkReal x1298=(cj3*sj1);
IkReal x1299=((1.0)*sj2);
IkReal x1300=(r02*sj0);
IkReal x1301=(r11*sj5);
IkReal x1302=(r21*sj5);
IkReal x1303=(r01*sj5);
IkReal x1304=(cj0*x1293);
IkReal x1305=(cj5*x1293);
IkReal x1306=((1.0)*x1293);
IkReal x1307=(sj0*x1294);
IkReal x1308=(cj0*x1294);
IkReal x1309=(sj0*sj5*x1293);
IkReal x1310=((1.0)*x1308);
evalcond[0]=((((-1.0)*sj1*x1299))+(((-1.0)*x1296))+((r22*x1294))+(((-1.0)*x1302*x1306))+((r20*x1305)));
evalcond[1]=(((cj2*x1298))+(((-1.0)*x1294*x1302))+((cj5*r20*x1294))+(((-1.0)*r22*x1306))+(((-1.0)*cj1*cj3*x1299)));
evalcond[2]=((((-1.0)*r10*x1295*x1304))+(((-1.0)*r12*x1310))+(((-1.0)*x1297*x1309))+((x1294*x1300))+((r00*sj0*x1305))+((x1301*x1304)));
evalcond[3]=((((-1.0)*r10*x1295*x1308))+sj3+((r12*x1304))+(((-1.0)*x1300*x1306))+(((-1.0)*sj5*x1297*x1307))+((cj5*r00*x1307))+((x1301*x1308)));
evalcond[4]=(((sj2*x1298))+(((-1.0)*r10*x1295*x1307))+((cj3*x1296))+(((-1.0)*r00*x1295*x1308))+((x1303*x1308))+((r12*sj0*x1293))+((r02*x1304))+((x1301*x1307)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x1307))+(((-1.0)*r00*x1295*x1304))+((x1303*x1304))+(((-1.0)*r02*x1310))+(((-1.0)*r10*sj0*x1293*x1295))+((sj0*x1293*x1301))+(((-1.0)*cj1*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - motoman_hc10 (315d91efc14df773e8db6f03dbdf0700)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
