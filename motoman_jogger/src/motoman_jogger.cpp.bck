#include <ros/ros.h>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_state/robot_state.h>
#include <motoman_jogger/Deltas.h>
#include <boost/thread/thread.hpp>

sensor_msgs::JointState current_joints;
std::map<std::string, int> joint_name_map;
robot_state::RobotStatePtr kinematic_state;
trajectory_msgs::JointTrajectory dummy_traj;
trajectory_msgs::JointTrajectoryPoint point;
const robot_state::JointModelGroup* joint_model_group;
ros::Time start_time, time_last, last_callback;
ros::Publisher streaming_pub;
motoman_jogger::Deltas deltas;

double dt, cart_translation_vel, cart_rotation_vel, move_timeout, max_translation_acc, max_rotation_acc;

Eigen::VectorXd d_X, d_theta, cart_acc, cart_vel;
Eigen::MatrixXd J;
Eigen::Vector3d ref_point;

void joint_state_cb(sensor_msgs::JointState msg)
{
  current_joints = msg;
}

Eigen::MatrixXd invert(Eigen::MatrixXd J)
{
  return(J.transpose()*(J*J.transpose()).inverse());
}

void cartesian_delta_cb(motoman_jogger::Deltas new_deltas)
{
  last_callback = ros::Time::now();
  //Check valid deltas:
  if(new_deltas.deltas.size() != 6)
  {
    ROS_ERROR("Cartesian jogging deltas must be of size 6. Ignoring message.");
    return;
  }
  deltas = new_deltas; 
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "motoman_jogger");
  ros::NodeHandle n;
  
  streaming_pub = n.advertise<trajectory_msgs::JointTrajectory>("joint_command", 10);
  ros::Subscriber cart_delta_sub = n.subscribe<motoman_jogger::Deltas>("cartesian_jogging_deltas", 1, cartesian_delta_cb);
  
  //Set up joint subscriber 
  ros::Subscriber joint_sub = n.subscribe("joint_states", 1, joint_state_cb);
  
  moveit::planning_interface::MoveGroup arm(argv[1]);
  dt = 0.1;
  cart_translation_vel = 1.0; 
  cart_rotation_vel = 2.0;
  move_timeout = 2.0;
  max_rotation_acc = 10.0;
  max_translation_acc = 10.0;

  d_X.resize(6);
  d_theta.resize(6);
  cart_acc.resize(6);
  cart_vel.resize(6);
  J.resize(6,7);
  ref_point.setZero(3);
  
  //initialize Cartesian delta vector;
  for(unsigned int i=0; i<6; i++)
  {
    d_X[i] = 0.0;
    cart_vel[i] = 0.0;
    cart_acc[i] = 0.0;
  }

  //Get set up for kinematics:
  robot_model_loader::RobotModelLoader model_loader("robot_description");
  robot_model::RobotModelPtr kinematic_model = model_loader.getModel();
  ROS_INFO("Model Frame: %s", kinematic_model->getModelFrame().c_str());
  
  kinematic_state = boost::shared_ptr<robot_state::RobotState>(new robot_state::RobotState(kinematic_model));
  kinematic_state->setToDefaultValues();
  joint_model_group = kinematic_model->getJointModelGroup("sia10");
  
  
  const std::vector<std::string> &joint_names = joint_model_group->getJointModelNames();
  std::vector<double> joint_values;
  kinematic_state->copyJointGroupPositions(joint_model_group, joint_values);
  ros::topic::waitForMessage<sensor_msgs::JointState>("joint_states");
 
  //Initialize jogging start.
  dummy_traj.joint_names = current_joints.name;  
  for(unsigned int joint=0; joint<7; joint++)
  {
    point.positions.push_back(current_joints.position.at(joint));
    point.velocities.push_back(0);
  }
  point.time_from_start = ros::Duration(0.0);
  dummy_traj.points.push_back(point);
  streaming_pub.publish(dummy_traj);
     
  start_time = ros::Time::now();
  time_last = ros::Time::now();
  deltas.deltas.resize(6,0);
  
  while(ros::ok)
  {
    if((ros::Time::now() - last_callback).toSec() > .15)
    {
      for(unsigned int i=0; i<6; i++)
      {
        deltas.deltas.at(i) = 0.0;
      }
    }  
    //This loop should do all of the computation and sending of joints.
    //The callback will just change the deltas.
    //If time passes since last time the callback got called, deltas reset to zero.
    //Time since last point:
    dt = (ros::Time::now() - time_last).toSec();
    time_last = ros::Time::now();
    
    //Compute commanded velocity, store in deltas.
    double sum_squares = 0;
    for(unsigned int i=0; i<3; i++)
    {
      sum_squares = sum_squares + deltas.deltas.at(i)*deltas.deltas.at(i);
    }
    double delta_mag = pow(sum_squares, 0.5);
    for(unsigned int i=0; i<3; i++)
    {
      if(delta_mag > 0.0)
        deltas.deltas.at(i) = deltas.deltas.at(i)/delta_mag*cart_translation_vel;
      else
        deltas.deltas.at(i) = 0.0;
    }
    
    sum_squares = 0;
    for(unsigned int i=3; i<6; i++)
    {
      sum_squares = sum_squares + deltas.deltas.at(i)*deltas.deltas.at(i);
    }
    delta_mag = pow(sum_squares, 0.5);
    for(unsigned int i=3; i<6; i++)
    {
      if(delta_mag > 0.0)
        deltas.deltas.at(i) = deltas.deltas.at(i)/delta_mag*cart_rotation_vel;
      else
        deltas.deltas.at(i) = 0.0;
    }
    //std::cout << "deltas:\n" << deltas << std::endl; 
    //Command velocity now in deltas. Compute the acceleration vector.
    sum_squares = 0;
    for(unsigned int i=0; i<3; i++)
    {
      sum_squares = sum_squares + pow(deltas.deltas.at(i) - cart_vel[i], 2);
    }
    double err_mag = pow(sum_squares, 0.5); //acc mag here is actually mag of velocity error.
    //scale acc_magnitude to be proportional near zero velocity error, but quickly saturating to max.
    double acc_mag = 0.0;
    if(err_mag > .05*2*cart_translation_vel)
      acc_mag = max_translation_acc;
    else
      acc_mag = err_mag*max_translation_acc/(.05*2*cart_translation_vel);
    for(unsigned int i=0; i<3; i++)
    {      
      if(acc_mag > 0.0) //proportional throttle
        cart_acc[i] = (deltas.deltas.at(i)-cart_vel[i])/err_mag*acc_mag/dt;
      else 
        cart_acc[i] = 0.0;
    }
    
    sum_squares = 0;
    for(unsigned int i=3; i<6; i++)
    {
      sum_squares = sum_squares + pow(deltas.deltas.at(i) - cart_vel[i], 2);
    }
    acc_mag = pow(sum_squares, 0.5);
    if(acc_mag > max_rotation_acc)
      acc_mag = max_rotation_acc;
    for(unsigned int i=3; i<6; i++)
    {
      if(acc_mag > 0.0) //proportional throttle.
        cart_acc[i] = (deltas.deltas.at(i)-cart_vel[i])/dt;
      else 
        cart_acc[i] = 0.0;
    }
    std::cout << "acceleration:\n" << cart_acc << std::endl;

    //TODO: If dt gets too large, it's possible that new command will overshoot at every iteration. Can fix this with a magnitude check, but may not be necessary. 

    //Compute velocities and Cartesian deltas.
    sum_squares = 0;
    for(unsigned int i=0; i<3; i++)
    {
      cart_vel[i] = cart_vel[i] + cart_acc[i]*dt;
      sum_squares += pow(cart_vel[i], 2);
    }
    double vel_mag = pow(sum_squares,0.5);
    for(unsigned int i=0; i<3; i++)
    {
      if(vel_mag > 0.0){
        d_X[i] = cart_vel[i]*dt;
      }
      else
      {
        cart_vel[i] = 0.0;
        d_X[i] = 0.0;
      }
    }
    
    sum_squares = 0;
    for(unsigned int i=3; i<6; i++)
    {
      cart_vel[i] = cart_vel[i] + cart_acc[i]*dt;
      sum_squares += pow(cart_vel[i], 2);
    }
    vel_mag = pow(sum_squares,0.5);
    for(unsigned int i=3; i<6; i++)
    {
      if(vel_mag > 0.0){
        d_X[i] = cart_vel[i]*dt;
      }
      else
      {
        cart_vel[i] = 0.0;
        d_X[i] = 0.0;
      }
    }
    std::cout << "velocity:\n" << cart_vel << std::endl;
    //std::cout << "d_X:\n" << d_X << std::endl;
    ros::topic::waitForMessage<sensor_msgs::JointState>("joint_states");
    
    //Get the Jacobian
    kinematic_state->setVariableValues(current_joints); 
    kinematic_state->getJacobian(joint_model_group, kinematic_state->getLinkModel(joint_model_group->getLinkModelNames().back()),ref_point, J);
    d_theta = invert(J)*d_X;
    std::cout << "d_theta:\n" << d_theta << std::endl;
    for(unsigned int j=0; j<7; j++)
    {
      point.positions.at(j) = current_joints.position.at(j) + d_theta[j];
      point.velocities.at(j) = d_theta[j]/dt;
    }
    
    point.time_from_start = ros::Time::now() - start_time;
    dummy_traj.points.at(0) = point;
    streaming_pub.publish(dummy_traj);
    //ros::Duration(0.01).sleep();
    
    ros::spinOnce();
  }
  ros::shutdown();
  return 1;
}
