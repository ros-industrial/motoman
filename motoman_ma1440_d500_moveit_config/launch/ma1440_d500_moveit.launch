<launch>
  <!-- toggle use of rviz from command line -->
  <arg name="use_rviz" default="true" />

  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
  <arg name="sim" default="true" />

  <!-- The starting world positions/rotations for the ma1440 and d500 -->
  <arg name="ma1440_xyz" default=""/>
  <arg name="ma1440_rpy" default=""/>
  <arg name="d500_xyz" default=""/>
  <arg name="d500_rpy" default=""/>
  <!-- The thickness of the tabletop mounted on top of the last link of the D500 -->
  <arg name="table_thickness" default=""/>

  <!-- Whether or not a camera mount is being used on the robot arm (ma1440) -->
  <arg name="using_cam_mount" default=""/>

  <!-- IP address of the robot to connect to, if connecting to a real robot -->
  <arg name="robot_ip" unless="$(arg sim)" />

  <!-- this 'robot_ns' argument corresponds to the robot name of the MoveIt controller group for both the arm and the
  positioner. this must be equivalent to the name of the controller group with all the joints in the system in
  /config/controllers.yaml. we manually set up a joint_trajectory_action server under this same namespace
  later in this file. also worth noting, the joints in the combined controller_list must line up with the
  joint names defined in ma1440_d500_support/config/joint_names_ma1440_d500.yaml config file -->
  <arg name="robot_ns"  default="combined" />

  <!-- the namespace of the controller box used for the motoman hardware. this value should be equal to the 'ns' value
  for each controller group in the ma1440_d500_motion_interface.yaml -->
  <arg name="controller_ns"  default="dx200" />

  <param name="robot_ns" value="$(arg robot_ns)"/>
  <param name="controller_ns" value="$(arg controller_ns)"/>


  <!-- Load the cell parameters associated with this setup -->
  <rosparam command="load" file="$(find motoman_ma1440_d500_support)/config/cell_parameters.yaml" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find motoman_ma1440_d500_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
    <arg name="ma1440_xyz" value="$(arg ma1440_xyz)"/>
    <arg name="ma1440_rpy" value="$(arg ma1440_rpy)"/>
    <arg name="d500_xyz" value="$(arg d500_xyz)"/>
    <arg name="d500_rpy" value="$(arg d500_rpy)"/>
    <arg name="table_thickness" value="$(arg table_thickness)"/>
    <arg name="using_cam_mount" value="$(arg using_cam_mount)"/>
  </include>

  <!-- These connect the 'positioner/base' and 'positioner/center' frame to the tf tree -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="postioner_base_broadcaster" args="0 0 0 0 0 0 1 positioner_base_dummy_link positioner/base" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="postioner_center_broadcaster" args="0 0 0 0 0 0 1 positioner_center_dummy_link positioner/center" />

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" >
    <remap unless="$(arg sim)" from="joint_states" to="$(arg robot_ns)/joint_states" />
  </node>

  <!-- Run the main MoveIt executable  -->
  <include file="$(find motoman_ma1440_d500_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="sim" value="$(arg sim)" />
    <arg name="robot_ns" value="$(arg robot_ns)" />
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include if="$(arg use_rviz)"
           file="$(find motoman_ma1440_d500_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include>

  <!-- this sets up the joint_trajectory_action server for the top level control group in MoveIt!, defined in /config/controllers.yaml -->
  <group ns="$(arg robot_ns)" >
    <!-- Set joints for joint_trajectory_action. -->
    <rosparam command="load" file="$(find motoman_ma1440_d500_support)/config/joint_names_ma1440_d500.yaml" />
    <node pkg="industrial_robot_client" name="$(arg robot_ns)_joint_trajectory_action" type="joint_trajectory_action" output="log">
      <param name="constraints/goal_threshold" type="double" value="5e-4"/>
    </node>
  </group>

  <rosparam command="load" file="$(find motoman_ma1440_d500_support)/config/ma1440_d500_motion_interface.yaml" />

  <!-- Setup the motoman simulator. Robot groups and joints are read from topic_list defined in ma1440_d500_motion_interface.yaml -->
  <group if="$(arg sim)">
    <node name="joint_trajectory_action" pkg="motoman_driver" type="motoman_driver_joint_trajectory_action" output="screen"/>
    <!-- Set the initial pose for the robot arm - the positioner will ignore these values because the num of joints doesn't match -->
    <param name="initial_joint_state" value="[0.523599, 0, 0, 0, 0, 0]" type="yaml"/>
    <node pkg="motoman_driver" type="industrial_robot_simulator" name="motoman_industrial_robot_simulator" output="screen"/>
    <node pkg="motoman_driver" name="dynamic_trajectory_converter" type="dynamic_trajectory_converter.py" output="screen"/>
  </group>

  <!-- dynamic trajectory converter node is now launched in (find motoman_driver)/launch/motion_streaming_interface.launch -->
	<include unless="$(arg sim)" file="$(find motoman_driver)/launch/robot_multigroup_interface_streaming_dx200.launch" >
		<arg name="robot_ip"   value="$(arg robot_ip)" />
	</include>

</launch>